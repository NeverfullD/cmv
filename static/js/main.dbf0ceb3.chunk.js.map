{"version":3,"sources":["Solver.ts","Chart.tsx","Graph.tsx","ParserModule.tsx","Settings.tsx","Main.tsx","reportWebVitals.ts","index.tsx"],"names":["Evaluator","require","Parser","BulirschStoerMethod","stepSize","timeStep","depth","model","error","this","variables","maxError","triangleMatrix","console","log","errors","n","m","modifiedMidpointMethod","Rnm","Map","compartments","forEach","c","val","get","name","set","push","Math","abs","reduce","p","length","result","h","interVariables","midpoints","lastPoint","k","evaluateExpression","ODE","z1","value","zm1","zm","exp","evaluate","Object","fromEntries","MyChart","props","data","generateData","state","header","i","dataPoint","timeSteps","currentTick","className","width","height","chartType","loader","options","hAxis","title","vAxis","rootProps","React","Component","Graph","generateInitialDataStructure","node","id","size","nodes","links","graphData","nodeLabel","nodeVal","ParserModule","parser","generate","event","setNewModel","parse","preventDefault","setState","target","onSubmit","onClick","bind","onChange","handleChange","type","Settings","onSimulate1","onSimulate","onSimulate10","onSimulate100","onSimulate1000","parseInt","steps","onChangeStepSize","changeStepSize","parseFloat","handleChangeSteps","handleChangeStepSize","Main","setModel","newModel","solver","solveSteps","parameters","k1","k2","allK","k3","k4","res","applyResult","execute","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dbf0ceb3.chunk.js","sourcesContent":["import { CModel } from \"./Types\";\r\n\r\nconst Evaluator = require(\"expr-eval\").Parser;\r\n\r\nexport interface Result {\r\n    result: Map<string, number>;\r\n    timeStep: number;\r\n}\r\n\r\nexport interface Solver {\r\n    execute(variables: Map<string, number>): Result;\r\n}\r\n\r\nexport class BulirschStoerMethod implements Solver {\r\n    stepSize: number;\r\n    timeStep: number;\r\n    error: number;\r\n    depth: number;\r\n    model: CModel;\r\n\r\n    constructor(stepSize: number, timeStep: number, depth: number, model: CModel) {\r\n        this.stepSize = stepSize;\r\n        this.timeStep = timeStep;\r\n        this.error = 0;\r\n        this.depth = depth;\r\n        this.model = model;\r\n    }\r\n\r\n    //Bulirsch-Stoer Method\r\n    execute(variables: Map<string, number>) {\r\n        const maxError = 0.001;\r\n        const maxDepth = 8; // how many rows to be calculated\r\n\r\n        var triangleMatrix: Map<string, number>[][] = [];\r\n\r\n        //error controlling loop\r\n        do {\r\n            //error control handling\r\n            //small error decrease depth or increase stepSize\r\n            if (this.error < maxError / 2) {\r\n                console.log(\"small error\");\r\n\r\n                if (this.depth > 2) {\r\n                    this.depth = this.depth - 1;\r\n                } else {\r\n                    this.stepSize = this.stepSize * 2;\r\n                    this.depth = this.depth + 1;\r\n                }\r\n            }\r\n            //big error increase depth or decrease stepSize\r\n            else if (this.error > maxError) {\r\n                if (this.depth < maxDepth) {\r\n                    this.depth = this.depth + 1;\r\n                } else {\r\n                    this.stepSize = this.stepSize / 2;\r\n                    this.depth = this.depth - 1;\r\n                }\r\n            }\r\n\r\n            var errors: number[] = [];\r\n            for (let n = 0; n < this.depth; n++) {\r\n                //rows\r\n                triangleMatrix[n] = [];\r\n                for (let m = 0; m <= n; m++) {\r\n                    //columns\r\n                    if (m === 0) {\r\n                        //steps = 2(i+1)\r\n                        triangleMatrix[n][m] = this.modifiedMidpointMethod(variables, 2 * (n + 1));\r\n                    } else {\r\n                        //extrapolation\r\n                        var Rnm: Map<string, number> = new Map();\r\n                        this.model.compartments.forEach((c) => {\r\n                            var val =\r\n                                triangleMatrix[n][m - 1].get(c.name)! +\r\n                                (triangleMatrix[n][m - 1].get(c.name)! - triangleMatrix[n - 1][m - 1].get(c.name)!) /\r\n                                    ((n / (n - 1)) ** (2 * m) - 1);\r\n                            Rnm.set(c.name, val);\r\n\r\n                            //error control\r\n                            //only take error from best estimate\r\n                            if (m === n && n === this.depth - 1) {\r\n                                errors.push(\r\n                                    Math.abs(\r\n                                        (triangleMatrix[n][m - 1].get(c.name)! -\r\n                                            triangleMatrix[n - 1][m - 1].get(c.name)!) /\r\n                                            ((n / (n - 1)) ** (2 * m) - 1),\r\n                                    ),\r\n                                );\r\n                            }\r\n                        }); //end forEach\r\n                        triangleMatrix[n][m] = Rnm;\r\n                    } //end elsif\r\n                } //end inner loop\r\n            } //end outer loop\r\n            this.error = errors.reduce((p, c) => p + c, 0) / errors.length;\r\n        } while (this.error > maxError); //end error control loop\r\n        this.timeStep = this.timeStep + this.stepSize;\r\n        console.log(this.error);\r\n        console.log(this.stepSize);\r\n        console.log(this.depth);\r\n        console.log({\r\n            result: triangleMatrix[triangleMatrix.length - 1][triangleMatrix[triangleMatrix.length - 1].length - 1],\r\n            timeStep: this.timeStep,\r\n        });\r\n\r\n        return {\r\n            result: triangleMatrix[triangleMatrix.length - 1][triangleMatrix[triangleMatrix.length - 1].length - 1],\r\n            timeStep: this.timeStep,\r\n        };\r\n    }\r\n\r\n    //modified midpoint method\r\n    modifiedMidpointMethod(variables: Map<string, number>, n: number) {\r\n        //stepSize == H\r\n        //h == H/n\r\n        var h = this.stepSize / n;\r\n        var interVariables = new Map(variables); //contains variables for intermediary steps\r\n        var midpoints: Map<string, number[]> = new Map();\r\n        var lastPoint: Map<string, number> = new Map();\r\n\r\n        //z0 == yn == current state\r\n        //z1 = z0 + h * f(x, z0)\r\n        this.model.compartments.forEach((c) => {\r\n            var k = this.evaluateExpression(c.ODE, interVariables);\r\n            var z1 = c.value[c.value.length - 1] + h * k;\r\n\r\n            interVariables.set(c.name, z1);\r\n            midpoints.set(c.name, [c.value[c.value.length - 1], z1]);\r\n        });\r\n\r\n        //zm+1 = zm−1 + 2h ∗ f(x + m ∗ h, zm) with m = 1, 2, ..., n − 1\r\n        for (let m = 1; m < n; m++) {\r\n            this.model.compartments.forEach((c) => {\r\n                var k = this.evaluateExpression(c.ODE, interVariables);\r\n                var zm1 = midpoints.get(c.name)![m - 1] + 2 * h * k;\r\n\r\n                interVariables.set(c.name, zm1);\r\n                midpoints.get(c.name)!.push(zm1);\r\n            });\r\n        }\r\n\r\n        //y(x + H) ≈ yn ≡ 1/2*(zn + zn−1 + h ∗ f(x + H, zn))\r\n        this.model.compartments.forEach((c) => {\r\n            var k = this.evaluateExpression(c.ODE, interVariables);\r\n            var zm = (1 / 2) * (midpoints.get(c.name)![n] + midpoints.get(c.name)![n - 1] + h * k);\r\n            lastPoint.set(c.name, zm);\r\n        });\r\n        return lastPoint;\r\n    }\r\n\r\n    evaluateExpression(exp: string, variables: Map<string, number>): number {\r\n        return Evaluator.evaluate(exp, Object.fromEntries(variables));\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport Chart from \"react-google-charts\";\r\n\r\nimport \"./Chart.css\";\r\nimport { CModel } from \"./Types\";\r\n\r\ninterface IProps {\r\n    model: CModel;\r\n    timeSteps: number[];\r\n    currentTick: number;\r\n}\r\n\r\ninterface IState {\r\n    data: any[];\r\n}\r\n\r\nexport default class MyChart extends React.Component<IProps, IState> {\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        var data = this.generateData();\r\n        this.state = {\r\n            data: data,\r\n        };\r\n    }\r\n\r\n    generateData() {\r\n        var data: any[] = [];\r\n        var header = [\"x\"];\r\n        this.props.model.compartments.forEach((c) => header.push(c.name));\r\n        data.push(header);\r\n        for (let i = 0; i <= this.props.currentTick; i++) {\r\n            var dataPoint = [this.props.timeSteps[i]];\r\n            this.props.model.compartments.forEach((c) => dataPoint.push(c.value[i]));\r\n            data.push(dataPoint);\r\n        }\r\n        //console.log(data);\r\n\r\n        return data;\r\n    }\r\n\r\n    componentDidMount() {}\r\n\r\n    onClick() {}\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"chart\">\r\n                Chart\r\n                <Chart\r\n                    width={\"600px\"}\r\n                    height={\"400px\"}\r\n                    chartType=\"LineChart\"\r\n                    loader={<div>Loading Chart</div>}\r\n                    data={this.state.data}\r\n                    options={{\r\n                        hAxis: {\r\n                            title: \"Time\",\r\n                        },\r\n                        vAxis: {\r\n                            title: \"Value\",\r\n                        },\r\n                    }}\r\n                    rootProps={{ \"data-testid\": \"2\" }}\r\n                />\r\n                {\r\n                    //<button onClick={this.onClick.bind(this)}>Test</button>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport ForceGraph2D, { NodeObject } from \"react-force-graph-2d\";\r\n\r\nimport \"./Graph.css\";\r\nimport { CModel } from \"./Types\";\r\n\r\ninterface NodeType extends NodeObject {\r\n    size: number;\r\n}\r\n\r\ninterface IProps {\r\n    model: CModel;\r\n}\r\n\r\ninterface IState {\r\n    data: { nodes: { id: string; size: number }[]; links: { source: string; target: string }[] };\r\n}\r\n\r\nexport default class Graph extends React.Component<IProps, IState> {\r\n    constructor(props: IProps) {\r\n        super(props);\r\n\r\n        var data = this.generateInitialDataStructure();\r\n        //console.log(data);\r\n\r\n        this.state = {\r\n            data: data,\r\n        };\r\n    }\r\n\r\n    generateInitialDataStructure() {\r\n        var node: { id: string; size: number }[] = [];\r\n        this.props.model.compartments.forEach((c) => {\r\n            node.push({ id: c.name, size: c.value[c.value.length - 1] });\r\n        });\r\n        var link: { source: string; target: string }[] = [];\r\n        //this.props.model.reactions.forEach((c) => {            link.push({ source: c.orig, target: c.dest });        });\r\n        return { nodes: node, links: link };\r\n    }\r\n\r\n    componentDidMount() {}\r\n\r\n    onClick() {}\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"graph\">\r\n                Graph\r\n                <ForceGraph2D\r\n                    graphData={this.state.data}\r\n                    nodeLabel=\"id\"\r\n                    nodeVal={(node) => (node as NodeType).size}\r\n                    width={500}\r\n                    height={500}\r\n                />\r\n                {\r\n                    //<button onClick={this.onClick.bind(this)}>Test</button>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport \"./ParserModule.css\";\r\nimport { CModel } from \"./Types\";\r\nimport { Parser, generate } from \"peggy\";\r\n\r\nvar modelGrammar = `{{\r\nfunction makeFloat(o) {\r\n    return parseFloat(o.join(\"\"), 10);\r\n}\r\n}}\r\n\r\nmodel = parameters:parameter* _ compartments:compartment+ {return {parameters, compartments};}\r\ncompartment = \"(\" _ \"comp\" _ name:ident _ value:value _ ODE:calc _ \")\" _ {return {name, value:[value], ODE};}\r\nparameter = \"(\" _ \"param\" _ name:ident _ value:value _ \")\" _ {return {name, value};}\r\nident = ident:[A-Za-z]+ {return ident.join(\"\")}\r\nvalue = digits:[0-9.]+ {return makeFloat(digits);}\r\n_ \"whitespace\" = [ \\\\t\\\\n\\\\r]*\r\ncalc = \"{\" calc:[^}]* \"}\" {return calc.join(\"\")}`;\r\n\r\ninterface IProps {\r\n    setNewModel: (newModel: CModel) => void;\r\n}\r\n\r\ninterface IState {\r\n    value: string;\r\n    parser: Parser;\r\n}\r\n\r\nexport default class ParserModule extends React.Component<IProps, IState> {\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        this.state = {\r\n            value: `(param alpha 0.75)\r\n(param beta 0.1)\r\n(param N 10000)\r\n\r\n(comp S 9999 {-alpha*S*I/N})\r\n(comp I 1 {alpha*S*I/N - beta*I})\r\n(comp R 0 {beta*I})`,\r\n            parser: generate(modelGrammar),\r\n        };\r\n    }\r\n\r\n    //Parse Model\r\n    onClick(event: any) {\r\n        //parse Input\r\n        this.props.setNewModel(this.state.parser.parse(this.state.value));\r\n        event.preventDefault();\r\n    }\r\n\r\n    handleChange(event: any) {\r\n        this.setState({ value: event.target.value });\r\n    }\r\n\r\n    componentDidMount() {}\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"parser\">\r\n                Parser\r\n                <form onSubmit={this.onClick.bind(this)}>\r\n                    <label>\r\n                        Model:\r\n                        <br />\r\n                        <textarea\r\n                            className=\"parserText\"\r\n                            value={this.state.value}\r\n                            onChange={this.handleChange.bind(this)}\r\n                        />\r\n                    </label>\r\n                    <br />\r\n                    <input type=\"submit\" value=\"Submit\" />\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport \"./Settings.css\";\r\n\r\ninterface IProps {\r\n    onSimulate: (n: number) => void;\r\n    changeStepSize: (stepSize: number) => void;\r\n    stepSize: number;\r\n}\r\n\r\ninterface IState {\r\n    steps: string;\r\n    stepSize: string;\r\n}\r\n\r\nexport default class Settings extends React.Component<IProps, IState> {\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        this.state = { steps: \"\", stepSize: \"\" };\r\n    }\r\n\r\n    onSimulate1 = () => {\r\n        this.props.onSimulate(1);\r\n    };\r\n    onSimulate10 = () => {\r\n        this.props.onSimulate(10);\r\n    };\r\n    onSimulate100 = () => {\r\n        this.props.onSimulate(100);\r\n    };\r\n    onSimulate1000 = () => {\r\n        this.props.onSimulate(1000);\r\n    };\r\n    onSimulate = () => {\r\n        this.props.onSimulate(parseInt(this.state.steps));\r\n    };\r\n\r\n    onChangeStepSize = () => {\r\n        this.props.changeStepSize(parseFloat(this.state.stepSize));\r\n    };\r\n\r\n    handleChangeSteps = (event: any) => {\r\n        this.setState({ steps: event.target.value });\r\n    };\r\n\r\n    handleChangeStepSize = (event: any) => {\r\n        this.setState({ stepSize: event.target.value });\r\n    };\r\n\r\n    componentDidMount() {}\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"settings\">\r\n                Settings\r\n                <br />\r\n                <button onClick={this.onSimulate1}>Simulate 1</button>\r\n                <button onClick={this.onSimulate10}>Simulate 10</button>\r\n                <button onClick={this.onSimulate100}>Simulate 100</button>\r\n                <button onClick={this.onSimulate1000}>Simulate 1000</button>\r\n                <button onClick={this.onSimulate}>Simulate: </button>\r\n                <input type=\"text\" value={this.state.steps} onChange={this.handleChangeSteps} />\r\n                <br />\r\n                <button onClick={this.onChangeStepSize}>Change Step Size (currently: {this.props.stepSize}): </button>\r\n                <input type=\"text\" value={this.state.stepSize} onChange={this.handleChangeStepSize} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport { CModel } from \"./Types\";\r\nimport { BulirschStoerMethod, Result, Solver } from \"./Solver\";\r\nimport MyChart from \"./Chart\";\r\nimport Graph from \"./Graph\";\r\nimport ParserModule from \"./ParserModule\";\r\nimport Settings from \"./Settings\";\r\n\r\nconst Evaluator = require(\"expr-eval\").Parser;\r\n\r\ninterface IProps {}\r\n\r\ninterface IState {\r\n    model: CModel;\r\n    timeSteps: number[];\r\n    currentTick: number;\r\n    stepSize: number;\r\n    solver: Solver;\r\n}\r\n\r\nexport default class Main extends React.Component<IProps, IState> {\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        this.state = {\r\n            model: { parameters: [], compartments: [] },\r\n            currentTick: 0,\r\n            timeSteps: [],\r\n            stepSize: 0.1,\r\n            solver: new BulirschStoerMethod(0, 0, 0, { parameters: [], compartments: [] }),\r\n        };\r\n    }\r\n\r\n    componentDidMount() {}\r\n\r\n    setModel = (newModel: CModel) => {\r\n        this.setState({\r\n            model: newModel,\r\n            currentTick: 0,\r\n            timeSteps: [0],\r\n            solver: new BulirschStoerMethod(this.state.stepSize, 0, 4, newModel),\r\n        });\r\n    };\r\n\r\n    onClick = () => {\r\n        console.log(this.state.model);\r\n    };\r\n\r\n    onSimulate = (n: number) => {\r\n        this.solveSteps(n);\r\n    };\r\n\r\n    changeStepSize = (stepSize: number) => {\r\n        this.setState({ stepSize: stepSize });\r\n    };\r\n\r\n    //solvers\r\n    //Runge-Kutta solver 2 Order\r\n    rungeKutta2(variables: Map<string, number>) {\r\n        var interVariables = new Map(variables); //contains variable values at half point of the step\r\n        this.state.model.compartments.forEach((c) => {\r\n            var k1 = this.evaluateExpression(c.ODE, variables) * (this.state.stepSize / 2);\r\n            interVariables.set(c.name, c.value[c.value.length - 1] + k1);\r\n        });\r\n\r\n        this.state.model.compartments.forEach((c) => {\r\n            var k2 = this.evaluateExpression(c.ODE, interVariables) * this.state.stepSize;\r\n            c.value.push(c.value[c.value.length - 1] + k2);\r\n        });\r\n    }\r\n\r\n    //Runge-Kutta solver 4 Order\r\n    rungeKutta4(variables: Map<string, number>) {\r\n        var interVariables = new Map(variables); //contains variables for intermediary steps\r\n        var allK = new Map();\r\n        //calc k1\r\n        this.state.model.compartments.forEach((c) => {\r\n            var k1 = this.evaluateExpression(c.ODE, variables) * this.state.stepSize;\r\n            interVariables.set(c.name, c.value[c.value.length - 1] + k1 / 2);\r\n            allK.set(c.name, [k1]);\r\n        });\r\n        //calc k2\r\n        this.state.model.compartments.forEach((c) => {\r\n            var k2 = this.evaluateExpression(c.ODE, interVariables) * this.state.stepSize;\r\n            interVariables.set(c.name, c.value[c.value.length - 1] + k2 / 2);\r\n            allK.get(c.name).push(k2);\r\n        });\r\n        //calc k3\r\n        this.state.model.compartments.forEach((c) => {\r\n            var k3 = this.evaluateExpression(c.ODE, interVariables) * this.state.stepSize;\r\n            interVariables.set(c.name, c.value[c.value.length - 1] + k3);\r\n            allK.get(c.name).push(k3);\r\n        });\r\n        //calc k4\r\n        this.state.model.compartments.forEach((c) => {\r\n            var k4 = this.evaluateExpression(c.ODE, interVariables) * this.state.stepSize;\r\n            allK.get(c.name).push(k4);\r\n        });\r\n        //calc y_n+1\r\n        this.state.model.compartments.forEach((c) => {\r\n            c.value.push(\r\n                c.value[c.value.length - 1] +\r\n                    (1 / 6) * allK.get(c.name)[0] + //k1\r\n                    (2 / 6) * allK.get(c.name)[1] + //k2\r\n                    (2 / 6) * allK.get(c.name)[2] + //k3\r\n                    (1 / 6) * allK.get(c.name)[3], //k4\r\n            );\r\n        });\r\n    }\r\n\r\n    euler(variables: Map<string, number>) {\r\n        this.state.model.compartments.forEach((c) => {\r\n            var res = this.evaluateExpression(c.ODE, variables) * this.state.stepSize;\r\n            c.value.push(c.value[c.value.length - 1] + res);\r\n        });\r\n    }\r\n\r\n    applyResult(res: Result) {\r\n        this.state.model.compartments.forEach((c) => {\r\n            c.value.push(res.result.get(c.name)!);\r\n        });\r\n        //save Timestamps for variable step size\r\n        this.state.timeSteps.push(res.timeStep);\r\n    }\r\n\r\n    //Main for solvers\r\n    solveSteps(steps: number) {\r\n        for (let i = 0; i < steps; i++) {\r\n            var variables = new Map();\r\n            this.state.model.compartments.forEach((c) => variables.set(c.name, c.value[this.state.currentTick + i]));\r\n            this.state.model.parameters.forEach((p) => variables.set(p.name, p.value)); //TODO insert Constant at parse time\r\n            //calculate Step\r\n            //this.euler(variables);\r\n            //this.rungeKutta2(variables);\r\n            //this.rungeKutta4(variables);\r\n            this.applyResult(this.state.solver.execute(variables));\r\n        }\r\n        //endCurrentTick\r\n        this.setState({ currentTick: this.state.currentTick + steps });\r\n    }\r\n\r\n    evaluateExpression(exp: string, variables: Map<string, number>): number {\r\n        return Evaluator.evaluate(exp, Object.fromEntries(variables));\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                Test\r\n                <button onClick={this.onClick}>Test</button>\r\n                <a href=\"https://github.com/NeverfullD/cmv\">to Github</a>\r\n                <ParserModule setNewModel={this.setModel} />\r\n                <Settings\r\n                    onSimulate={this.onSimulate}\r\n                    changeStepSize={this.changeStepSize}\r\n                    stepSize={this.state.stepSize}\r\n                />\r\n                <MyChart\r\n                    model={this.state.model}\r\n                    timeSteps={this.state.timeSteps}\r\n                    currentTick={this.state.currentTick}\r\n                    key={this.state.currentTick + \"chart\"}\r\n                />\r\n                <Graph model={this.state.model} key={this.state.currentTick + \"graph\"} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Main from \"./Main\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Main />\n    </React.StrictMode>,\n    document.getElementById(\"root\"),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}