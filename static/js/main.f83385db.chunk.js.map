{"version":3,"sources":["Solver.ts","Chart.tsx","Graph.tsx","ParserModule.tsx","Settings.tsx","Main.tsx","reportWebVitals.ts","index.tsx"],"names":["Solver","stepSize","timeStep","model","this","exp","variables","evaluate","Object","fromEntries","Map","compartments","forEach","c","set","name","value","length","EulerMethod","generateVariables","res","k","evaluateExpression","ODE","result","RungeKutta2Method","interVariables","k1","k2","RungeKutta4Method","allK","get","push","k3","k4","BulirschStoerMethod","depth","error","maxError","triangleMatrix","errors","n","m","modifiedMidpointMethod","Rnm","val","Math","abs","reduce","p","h","midpoints","lastPoint","z1","zm1","zm","MyChart","props","data","generateData","state","header","i","dataPoint","timeSteps","currentTick","className","width","height","chartType","loader","options","hAxis","title","vAxis","rootProps","React","Component","Graph","generateInitialDataStructure","node","id","size","nodes","links","graphData","nodeLabel","nodeVal","Evaluator","require","Parser","ParserModule","parser","generate","event","parse","constants","parameters","simplify","setNewModel","preventDefault","setState","target","onSubmit","onClick","bind","onChange","handleChange","type","Settings","onSimulate1","onSimulate","onSimulate10","onSimulate100","onSimulate1000","parseInt","steps","onChangeStepSize","changeStepSize","parseFloat","handleChangeSteps","handleChangeStepSize","handleSelectedSolver","changeSelectedSolver","selectedSolver","Main","console","log","setModel","newModel","solver","getSolver","solveSteps","applyResult","execute","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f83385db.chunk.js","sourcesContent":["import { Expression } from \"expr-eval\";\r\nimport { CModel } from \"./Types\";\r\n\r\nexport interface Result {\r\n    result: Map<string, number>;\r\n    timeStep: number;\r\n}\r\n\r\nexport abstract class Solver {\r\n    stepSize: number;\r\n    timeStep: number;\r\n    model: CModel;\r\n\r\n    constructor(stepSize: number, timeStep: number, model: CModel) {\r\n        this.stepSize = stepSize;\r\n        this.timeStep = timeStep;\r\n        this.model = model;\r\n    }\r\n\r\n    abstract execute(): Result;\r\n\r\n    evaluateExpression(exp: Expression, variables: Map<string, number>): number {\r\n        return exp.evaluate(Object.fromEntries(variables));\r\n    }\r\n\r\n    generateVariables() {\r\n        var variables = new Map();\r\n        this.model.compartments.forEach((c) => variables.set(c.name, c.value[c.value.length - 1]));\r\n        return variables;\r\n    }\r\n}\r\n\r\nexport class EulerMethod extends Solver {\r\n    execute() {\r\n        var variables = this.generateVariables();\r\n        var res: Map<string, number> = new Map();\r\n        this.model.compartments.forEach((c) => {\r\n            var k = this.evaluateExpression(c.ODE, variables) * this.stepSize;\r\n            res.set(c.name, c.value[c.value.length - 1] + k);\r\n        });\r\n        this.timeStep = this.timeStep + this.stepSize;\r\n        return {\r\n            result: res,\r\n            timeStep: this.timeStep,\r\n        };\r\n    }\r\n}\r\n\r\nexport class RungeKutta2Method extends Solver {\r\n    execute() {\r\n        var variables = this.generateVariables();\r\n        var res: Map<string, number> = new Map();\r\n        var interVariables = new Map(variables); //contains variable values at half point of the step\r\n        this.model.compartments.forEach((c) => {\r\n            var k1 = this.evaluateExpression(c.ODE, variables) * (this.stepSize / 2);\r\n            interVariables.set(c.name, c.value[c.value.length - 1] + k1);\r\n        });\r\n\r\n        this.model.compartments.forEach((c) => {\r\n            var k2 = this.evaluateExpression(c.ODE, interVariables) * this.stepSize;\r\n            res.set(c.name, c.value[c.value.length - 1] + k2);\r\n        });\r\n        this.timeStep = this.timeStep + this.stepSize;\r\n        return {\r\n            result: res,\r\n            timeStep: this.timeStep,\r\n        };\r\n    }\r\n}\r\n\r\nexport class RungeKutta4Method extends Solver {\r\n    execute() {\r\n        var variables = this.generateVariables();\r\n        var res: Map<string, number> = new Map();\r\n        var interVariables = new Map(variables); //contains variables for intermediary steps\r\n        var allK = new Map();\r\n        //calc k1\r\n        this.model.compartments.forEach((c) => {\r\n            var k1 = this.evaluateExpression(c.ODE, variables) * this.stepSize;\r\n            interVariables.set(c.name, c.value[c.value.length - 1] + k1 / 2);\r\n            allK.set(c.name, [k1]);\r\n        });\r\n        //calc k2\r\n        this.model.compartments.forEach((c) => {\r\n            var k2 = this.evaluateExpression(c.ODE, interVariables) * this.stepSize;\r\n            interVariables.set(c.name, c.value[c.value.length - 1] + k2 / 2);\r\n            allK.get(c.name).push(k2);\r\n        });\r\n        //calc k3\r\n        this.model.compartments.forEach((c) => {\r\n            var k3 = this.evaluateExpression(c.ODE, interVariables) * this.stepSize;\r\n            interVariables.set(c.name, c.value[c.value.length - 1] + k3);\r\n            allK.get(c.name).push(k3);\r\n        });\r\n        //calc k4\r\n        this.model.compartments.forEach((c) => {\r\n            var k4 = this.evaluateExpression(c.ODE, interVariables) * this.stepSize;\r\n            allK.get(c.name).push(k4);\r\n        });\r\n        //calc y_n+1\r\n        this.model.compartments.forEach((c) => {\r\n            res.set(\r\n                c.name,\r\n                c.value[c.value.length - 1] +\r\n                    (1 / 6) * allK.get(c.name)[0] + //k1\r\n                    (2 / 6) * allK.get(c.name)[1] + //k2\r\n                    (2 / 6) * allK.get(c.name)[2] + //k3\r\n                    (1 / 6) * allK.get(c.name)[3], //k4\r\n            );\r\n        });\r\n        this.timeStep = this.timeStep + this.stepSize;\r\n        return {\r\n            result: res,\r\n            timeStep: this.timeStep,\r\n        };\r\n    }\r\n}\r\n\r\nexport class BulirschStoerMethod extends Solver {\r\n    error: number;\r\n    depth: number;\r\n\r\n    constructor(stepSize: number, timeStep: number, model: CModel, depth: number) {\r\n        super(stepSize, timeStep, model);\r\n        this.error = 0;\r\n        this.depth = depth;\r\n    }\r\n\r\n    //Bulirsch-Stoer Method\r\n    execute() {\r\n        var variables = this.generateVariables();\r\n        const maxError = 0.001;\r\n        const maxDepth = 8; // how many rows to be calculated\r\n\r\n        var triangleMatrix: Map<string, number>[][] = [];\r\n\r\n        //error controlling loop\r\n        do {\r\n            //error control handling\r\n            //small error decrease depth or increase stepSize\r\n            if (this.error < maxError / 2) {\r\n                if (this.depth > 2) {\r\n                    this.depth = this.depth - 1;\r\n                } else {\r\n                    this.stepSize = this.stepSize * 2;\r\n                    this.depth = this.depth + 1;\r\n                }\r\n            }\r\n            //big error increase depth or decrease stepSize\r\n            else if (this.error > maxError) {\r\n                if (this.depth < maxDepth) {\r\n                    this.depth = this.depth + 1;\r\n                } else {\r\n                    this.stepSize = this.stepSize / 2;\r\n                    this.depth = this.depth - 1;\r\n                }\r\n            }\r\n\r\n            var errors: number[] = [];\r\n            for (let n = 0; n < this.depth; n++) {\r\n                //rows\r\n                triangleMatrix[n] = [];\r\n                for (let m = 0; m <= n; m++) {\r\n                    //columns\r\n                    if (m === 0) {\r\n                        //steps = 2(i+1)\r\n                        triangleMatrix[n][m] = this.modifiedMidpointMethod(variables, 2 * (n + 1));\r\n                    } else {\r\n                        //extrapolation\r\n                        var Rnm: Map<string, number> = new Map();\r\n                        this.model.compartments.forEach((c) => {\r\n                            var val =\r\n                                triangleMatrix[n][m - 1].get(c.name)! +\r\n                                (triangleMatrix[n][m - 1].get(c.name)! - triangleMatrix[n - 1][m - 1].get(c.name)!) /\r\n                                    ((n / (n - 1)) ** (2 * m) - 1);\r\n                            Rnm.set(c.name, val);\r\n\r\n                            //error control\r\n                            //only take error from best estimate\r\n                            if (m === n && n === this.depth - 1) {\r\n                                errors.push(\r\n                                    Math.abs(\r\n                                        (triangleMatrix[n][m - 1].get(c.name)! -\r\n                                            triangleMatrix[n - 1][m - 1].get(c.name)!) /\r\n                                            ((n / (n - 1)) ** (2 * m) - 1),\r\n                                    ),\r\n                                );\r\n                            }\r\n                        }); //end forEach\r\n                        triangleMatrix[n][m] = Rnm;\r\n                    } //end elsif\r\n                } //end inner loop\r\n            } //end outer loop\r\n            this.error = errors.reduce((p, c) => p + c, 0) / errors.length;\r\n        } while (this.error > maxError); //end error control loop\r\n        this.timeStep = this.timeStep + this.stepSize;\r\n        return {\r\n            result: triangleMatrix[triangleMatrix.length - 1][triangleMatrix[triangleMatrix.length - 1].length - 1],\r\n            timeStep: this.timeStep,\r\n        };\r\n    }\r\n\r\n    //modified midpoint method\r\n    modifiedMidpointMethod(variables: Map<string, number>, n: number) {\r\n        //stepSize == H\r\n        //h == H/n\r\n        var h = this.stepSize / n;\r\n        var interVariables = new Map(variables); //contains variables for intermediary steps\r\n        var midpoints: Map<string, number[]> = new Map();\r\n        var lastPoint: Map<string, number> = new Map();\r\n\r\n        //z0 == yn == current state\r\n        //z1 = z0 + h * f(x, z0)\r\n        this.model.compartments.forEach((c) => {\r\n            var k = this.evaluateExpression(c.ODE, interVariables);\r\n            var z1 = c.value[c.value.length - 1] + h * k;\r\n\r\n            interVariables.set(c.name, z1);\r\n            midpoints.set(c.name, [c.value[c.value.length - 1], z1]);\r\n        });\r\n\r\n        //zm+1 = zm−1 + 2h ∗ f(x + m ∗ h, zm) with m = 1, 2, ..., n − 1\r\n        for (let m = 1; m < n; m++) {\r\n            this.model.compartments.forEach((c) => {\r\n                var k = this.evaluateExpression(c.ODE, interVariables);\r\n                var zm1 = midpoints.get(c.name)![m - 1] + 2 * h * k;\r\n\r\n                interVariables.set(c.name, zm1);\r\n                midpoints.get(c.name)!.push(zm1);\r\n            });\r\n        }\r\n\r\n        //y(x + H) ≈ yn ≡ 1/2*(zn + zn−1 + h ∗ f(x + H, zn))\r\n        this.model.compartments.forEach((c) => {\r\n            var k = this.evaluateExpression(c.ODE, interVariables);\r\n            var zm = (1 / 2) * (midpoints.get(c.name)![n] + midpoints.get(c.name)![n - 1] + h * k);\r\n            lastPoint.set(c.name, zm);\r\n        });\r\n        return lastPoint;\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport Chart from \"react-google-charts\";\r\n\r\nimport \"./Chart.css\";\r\nimport { CModel } from \"./Types\";\r\n\r\ninterface IProps {\r\n    model: CModel;\r\n    timeSteps: number[];\r\n    currentTick: number;\r\n}\r\n\r\ninterface IState {\r\n    data: any[];\r\n}\r\n\r\nexport default class MyChart extends React.Component<IProps, IState> {\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        var data = this.generateData();\r\n        this.state = {\r\n            data: data,\r\n        };\r\n    }\r\n\r\n    generateData() {\r\n        var data: any[] = [];\r\n        var header = [\"x\"];\r\n        this.props.model.compartments.forEach((c) => header.push(c.name));\r\n        data.push(header);\r\n        for (let i = 0; i <= this.props.currentTick; i++) {\r\n            var dataPoint = [this.props.timeSteps[i]];\r\n            this.props.model.compartments.forEach((c) => dataPoint.push(c.value[i]));\r\n            data.push(dataPoint);\r\n        }\r\n        //console.log(data);\r\n\r\n        return data;\r\n    }\r\n\r\n    componentDidMount() {}\r\n\r\n    onClick() {}\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"chart\">\r\n                Chart\r\n                <Chart\r\n                    width={\"600px\"}\r\n                    height={\"400px\"}\r\n                    chartType=\"LineChart\"\r\n                    loader={<div>Loading Chart</div>}\r\n                    data={this.state.data}\r\n                    options={{\r\n                        hAxis: {\r\n                            title: \"Time\",\r\n                        },\r\n                        vAxis: {\r\n                            title: \"Value\",\r\n                        },\r\n                    }}\r\n                    rootProps={{ \"data-testid\": \"2\" }}\r\n                />\r\n                {\r\n                    //<button onClick={this.onClick.bind(this)}>Test</button>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport ForceGraph2D, { NodeObject } from \"react-force-graph-2d\";\r\n\r\nimport \"./Graph.css\";\r\nimport { CModel } from \"./Types\";\r\n\r\ninterface NodeType extends NodeObject {\r\n    size: number;\r\n}\r\n\r\ninterface IProps {\r\n    model: CModel;\r\n}\r\n\r\ninterface IState {\r\n    data: { nodes: { id: string; size: number }[]; links: { source: string; target: string }[] };\r\n}\r\n\r\nexport default class Graph extends React.Component<IProps, IState> {\r\n    constructor(props: IProps) {\r\n        super(props);\r\n\r\n        var data = this.generateInitialDataStructure();\r\n        //console.log(data);\r\n\r\n        this.state = {\r\n            data: data,\r\n        };\r\n    }\r\n\r\n    generateInitialDataStructure() {\r\n        var node: { id: string; size: number }[] = [];\r\n        this.props.model.compartments.forEach((c) => {\r\n            node.push({ id: c.name, size: c.value[c.value.length - 1] });\r\n        });\r\n        var link: { source: string; target: string }[] = [];\r\n        //this.props.model.reactions.forEach((c) => {            link.push({ source: c.orig, target: c.dest });        });\r\n        return { nodes: node, links: link };\r\n    }\r\n\r\n    componentDidMount() {}\r\n\r\n    onClick() {}\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"graph\">\r\n                Graph\r\n                <ForceGraph2D\r\n                    graphData={this.state.data}\r\n                    nodeLabel=\"id\"\r\n                    nodeVal={(node) => (node as NodeType).size}\r\n                    width={500}\r\n                    height={500}\r\n                />\r\n                {\r\n                    //<button onClick={this.onClick.bind(this)}>Test</button>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport \"./ParserModule.css\";\r\nimport { CModel } from \"./Types\";\r\nimport { Parser, generate } from \"peggy\";\r\nconst Evaluator = require(\"expr-eval\").Parser;\r\n\r\nconst modelGrammar = `{{\r\nfunction makeFloat(o) {\r\n    return parseFloat(o.join(\"\"), 10);\r\n}\r\n}}\r\n\r\nmodel = parameters:parameter* _ compartments:compartment+ {return {parameters, compartments};}\r\ncompartment = \"(\" _ \"comp\" _ name:ident _ value:value _ ODE:calc _ \")\" _ {return {name, value:[value], ODE};}\r\nparameter = \"(\" _ \"param\" _ name:ident _ value:value _ \")\" _ {return {name, value};}\r\nident = ident:[A-Za-z]+ {return ident.join(\"\")}\r\nvalue = digits:[0-9.]+ {return makeFloat(digits);}\r\n_ \"whitespace\" = [ \\\\t\\\\n\\\\r]*\r\ncalc = \"{\" calc:[^}]* \"}\" {return calc.join(\"\")}`;\r\n\r\ninterface IProps {\r\n    setNewModel: (newModel: CModel) => void;\r\n}\r\n\r\ninterface IState {\r\n    value: string;\r\n    parser: Parser;\r\n}\r\n\r\nexport default class ParserModule extends React.Component<IProps, IState> {\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        this.state = {\r\n            value: `(param alpha 0.75)\r\n(param beta 0.1)\r\n(param N 10000)\r\n\r\n(comp S 9999 {-alpha*S*I/N})\r\n(comp I 1 {alpha*S*I/N - beta*I})\r\n(comp R 0 {beta*I})`,\r\n            parser: generate(modelGrammar),\r\n        };\r\n    }\r\n\r\n    //Parse Model\r\n    onClick(event: any) {\r\n        //parse Input\r\n        var model: CModel = this.state.parser.parse(this.state.value);\r\n        //insert constants\r\n        var constants = new Map();\r\n        model.parameters.forEach((p) => constants.set(p.name, p.value));\r\n        model.compartments.forEach((c) => (c.ODE = Evaluator.parse(c.ODE).simplify(Object.fromEntries(constants))));\r\n        //set model\r\n        this.props.setNewModel(model);\r\n        event.preventDefault();\r\n    }\r\n\r\n    handleChange(event: any) {\r\n        this.setState({ value: event.target.value });\r\n    }\r\n\r\n    componentDidMount() {}\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"parser\">\r\n                Parser\r\n                <form onSubmit={this.onClick.bind(this)}>\r\n                    <label>\r\n                        Model:\r\n                        <br />\r\n                        <textarea\r\n                            className=\"parserText\"\r\n                            value={this.state.value}\r\n                            onChange={this.handleChange.bind(this)}\r\n                        />\r\n                    </label>\r\n                    <br />\r\n                    <input type=\"submit\" value=\"Submit\" />\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport \"./Settings.css\";\r\n\r\ninterface IProps {\r\n    onSimulate: (n: number) => void;\r\n    changeStepSize: (stepSize: number) => void;\r\n    stepSize: number;\r\n    selectedSolver: string;\r\n    changeSelectedSolver: (selectedSolver: string) => void;\r\n}\r\n\r\ninterface IState {\r\n    steps: string;\r\n    stepSize: string;\r\n}\r\n\r\nexport default class Settings extends React.Component<IProps, IState> {\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        this.state = { steps: \"\", stepSize: \"\" };\r\n    }\r\n\r\n    onSimulate1 = () => {\r\n        this.props.onSimulate(1);\r\n    };\r\n    onSimulate10 = () => {\r\n        this.props.onSimulate(10);\r\n    };\r\n    onSimulate100 = () => {\r\n        this.props.onSimulate(100);\r\n    };\r\n    onSimulate1000 = () => {\r\n        this.props.onSimulate(1000);\r\n    };\r\n    onSimulate = () => {\r\n        this.props.onSimulate(parseInt(this.state.steps));\r\n    };\r\n\r\n    onChangeStepSize = () => {\r\n        this.props.changeStepSize(parseFloat(this.state.stepSize));\r\n    };\r\n\r\n    handleChangeSteps = (event: any) => {\r\n        this.setState({ steps: event.target.value });\r\n    };\r\n\r\n    handleChangeStepSize = (event: any) => {\r\n        this.setState({ stepSize: event.target.value });\r\n    };\r\n\r\n    handleSelectedSolver = (event: any) => {\r\n        this.props.changeSelectedSolver(event.target.value);\r\n    };\r\n\r\n    componentDidMount() {}\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"settings\">\r\n                Settings\r\n                <br />\r\n                <button onClick={this.onSimulate1}>Simulate 1</button>\r\n                <button onClick={this.onSimulate10}>Simulate 10</button>\r\n                <button onClick={this.onSimulate100}>Simulate 100</button>\r\n                <button onClick={this.onSimulate1000}>Simulate 1000</button>\r\n                <button onClick={this.onSimulate}>Simulate: </button>\r\n                <input type=\"text\" value={this.state.steps} onChange={this.handleChangeSteps} />\r\n                <br />\r\n                <button onClick={this.onChangeStepSize}>Change Step Size (currently: {this.props.stepSize}): </button>\r\n                <input type=\"text\" value={this.state.stepSize} onChange={this.handleChangeStepSize} />\r\n                <br />\r\n                <label>Choose a Solver:</label>\r\n                <select value={this.props.selectedSolver} onChange={this.handleSelectedSolver}>\r\n                    <option value=\"euler\">Euler</option>\r\n                    <option value=\"rungeKutta2\">Runge-Kutta 2.Order</option>\r\n                    <option value=\"rungeKutta4\">Runge-Kutta 4.Order</option>\r\n                    <option value=\"bulirschStoer\">Bulirsch-Stoer</option>\r\n                </select>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport { CModel } from \"./Types\";\r\nimport { BulirschStoerMethod, EulerMethod, Result, RungeKutta2Method, RungeKutta4Method, Solver } from \"./Solver\";\r\nimport MyChart from \"./Chart\";\r\nimport Graph from \"./Graph\";\r\nimport ParserModule from \"./ParserModule\";\r\nimport Settings from \"./Settings\";\r\n\r\ninterface IProps {}\r\n\r\ninterface IState {\r\n    model: CModel;\r\n    timeSteps: number[];\r\n    currentTick: number;\r\n    stepSize: number;\r\n    solver: Solver;\r\n    selectedSolver: string;\r\n}\r\n\r\nexport default class Main extends React.Component<IProps, IState> {\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        this.state = {\r\n            model: { parameters: [], compartments: [] },\r\n            currentTick: 0,\r\n            timeSteps: [],\r\n            stepSize: 0.1,\r\n            solver: new EulerMethod(0, 0, { parameters: [], compartments: [] }),\r\n            selectedSolver: \"euler\",\r\n        };\r\n    }\r\n\r\n    componentDidMount() {}\r\n\r\n    onClick = () => {\r\n        console.log(this.state);\r\n    };\r\n\r\n    //handle Settings\r\n    setModel = (newModel: CModel) => {\r\n        this.setState({\r\n            model: newModel,\r\n            currentTick: 0,\r\n            timeSteps: [0],\r\n            solver: this.getSolver(this.state.selectedSolver, 0, newModel),\r\n        });\r\n    };\r\n\r\n    onSimulate = (n: number) => {\r\n        this.solveSteps(n);\r\n    };\r\n\r\n    changeStepSize = (stepSize: number) => {\r\n        this.setState({ stepSize: stepSize });\r\n    };\r\n\r\n    changeSelectedSolver = (selectedSolver: string) => {\r\n        this.setState({\r\n            selectedSolver: selectedSolver,\r\n            solver: this.getSolver(\r\n                selectedSolver,\r\n                this.state.timeSteps[this.state.timeSteps.length - 1],\r\n                this.state.model,\r\n            ),\r\n        });\r\n    };\r\n\r\n    getSolver(selectedSolver: string, timeStep: number, model: CModel): Solver {\r\n        console.log(this.state);\r\n        console.log(selectedSolver);\r\n\r\n        switch (selectedSolver) {\r\n            case \"euler\":\r\n                return new EulerMethod(this.state.stepSize, timeStep, model);\r\n            case \"rungeKutta2\":\r\n                return new RungeKutta2Method(this.state.stepSize, timeStep, model);\r\n            case \"rungeKutta4\":\r\n                return new RungeKutta4Method(this.state.stepSize, timeStep, model);\r\n            case \"bulirschStoer\":\r\n                return new BulirschStoerMethod(this.state.stepSize, timeStep, model, 4);\r\n            default:\r\n                return new EulerMethod(this.state.stepSize, timeStep, model);\r\n        }\r\n    }\r\n\r\n    //simulation Core\r\n    applyResult(res: Result) {\r\n        this.state.model.compartments.forEach((c) => {\r\n            c.value.push(res.result.get(c.name)!);\r\n        });\r\n        //save Timestamps for variable step size\r\n        this.state.timeSteps.push(res.timeStep);\r\n    }\r\n\r\n    //Main for solvers\r\n    solveSteps(steps: number) {\r\n        for (let i = 0; i < steps; i++) {\r\n            //calculate Step\r\n            this.applyResult(this.state.solver.execute());\r\n        }\r\n        //endCurrentTick\r\n        this.setState({ currentTick: this.state.currentTick + steps });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                Test\r\n                <button onClick={this.onClick}>Test</button>\r\n                <a href=\"https://github.com/NeverfullD/cmv\">to Github</a>\r\n                <ParserModule setNewModel={this.setModel} />\r\n                <Settings\r\n                    onSimulate={this.onSimulate}\r\n                    changeStepSize={this.changeStepSize}\r\n                    stepSize={this.state.stepSize}\r\n                    selectedSolver={this.state.selectedSolver}\r\n                    changeSelectedSolver={this.changeSelectedSolver}\r\n                />\r\n                <MyChart\r\n                    model={this.state.model}\r\n                    timeSteps={this.state.timeSteps}\r\n                    currentTick={this.state.currentTick}\r\n                    key={this.state.currentTick + \"chart\"}\r\n                />\r\n                <Graph model={this.state.model} key={this.state.currentTick + \"graph\"} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Main from \"./Main\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Main />\n    </React.StrictMode>,\n    document.getElementById(\"root\"),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}