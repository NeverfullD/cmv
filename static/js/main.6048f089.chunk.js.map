{"version":3,"sources":["Chart.tsx","Graph.tsx","ParserModule.tsx","Settings.tsx","Main.tsx","reportWebVitals.ts","index.tsx"],"names":["MyChart","props","data","generateData","state","header","this","model","compartments","forEach","c","push","name","i","dataPoint","timeSteps","value","currentTick","console","log","className","width","height","chartType","loader","options","hAxis","title","vAxis","rootProps","React","Component","Graph","generateInitialDataStructure","node","id","size","length","nodes","links","graphData","nodeLabel","nodeVal","ParserModule","parser","generate","event","setNewModel","parse","preventDefault","setState","target","onSubmit","onClick","bind","onChange","handleChange","type","Settings","onSimulate1","onSimulate","onSimulate10","onSimulate100","onSimulate1000","parseInt","steps","onChangeStepSize","changeStepSize","parseFloat","stepSize","handleChangeSteps","handleChangeStepSize","Evaluator","require","Parser","Main","setModel","newModel","n","solveSteps","parameters","variables","Map","set","p","res","evaluateExpression","ODE","exp","evaluate","Object","fromEntries","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2SAgBqBA,E,kDACjB,WAAYC,GAAgB,IAAD,sBAEvB,IAAIC,GADJ,cAAMD,IACUE,eAFO,OAGvB,EAAKC,MAAQ,CACTF,KAAMA,GAJa,E,gDAQ3B,WAAgB,IAAD,OACPA,EAAc,GACdG,EAAS,CAAC,KACdC,KAAKL,MAAMM,MAAMC,aAAaC,SAAQ,SAACC,GAAD,OAAOL,EAAOM,KAAKD,EAAEE,SAC3DV,EAAKS,KAAKN,GACV,IALW,eAKFQ,GACDC,EAAY,CAAC,EAAKb,MAAMc,UAAUF,IACtC,EAAKZ,MAAMM,MAAMC,aAAaC,SAAQ,SAACC,GAAD,OAAOI,EAAUH,KAAKD,EAAEM,MAAMH,OACpEX,EAAKS,KAAKG,IAHLD,EAAI,EAAGA,GAAKP,KAAKL,MAAMgB,YAAaJ,IAAK,CAAC,IAC3CC,EAD0C,EAAzCD,GAOT,OAFAK,QAAQC,IAAIjB,GAELA,I,+BAGX,c,qBAEA,c,oBAEA,WACI,OACI,sBAAKkB,UAAU,QAAf,kBAEI,cAAC,IAAD,CACIC,MAAO,QACPC,OAAQ,QACRC,UAAU,YACVC,OAAQ,gDACRtB,KAAMI,KAAKF,MAAMF,KACjBuB,QAAS,CACLC,MAAO,CACHC,MAAO,QAEXC,MAAO,CACHD,MAAO,UAGfE,UAAW,CAAE,cAAe,c,GA9CXC,IAAMC,W,QCEtBC,G,wDACjB,WAAY/B,GAAgB,IAAD,sBAGvB,IAAIC,GAFJ,cAAMD,IAEUgC,+BAHO,OAIvBf,QAAQC,IAAIjB,GAEZ,EAAKE,MAAQ,CACTF,KAAMA,GAPa,E,gEAW3B,WACI,IAAIgC,EAAuC,GAC3C5B,KAAKL,MAAMM,MAAMC,aAAaC,SAAQ,SAACC,GACnCwB,EAAKvB,KAAK,CAAEwB,GAAIzB,EAAEE,KAAMwB,KAAM1B,EAAEM,MAAMN,EAAEM,MAAMqB,OAAS,QAI3D,MAAO,CAAEC,MAAOJ,EAAMK,MAF2B,M,+BAKrD,c,qBAEA,c,oBAEA,WACI,OACI,sBAAKnB,UAAU,QAAf,kBAEI,cAAC,IAAD,CACIoB,UAAWlC,KAAKF,MAAMF,KACtBuC,UAAU,KACVC,QAAS,SAACR,GAAD,OAAWA,EAAkBE,MACtCf,MAAO,IACPC,OAAQ,a,GAnCOQ,IAAMC,Y,gBCUpBY,E,kDACjB,WAAY1C,GAAgB,IAAD,8BACvB,cAAMA,IACDG,MAAQ,CACTY,MAAM,gJAON4B,OAAQC,mBAlCJ,6iBAwBe,E,2CAe3B,SAAQC,GAEJxC,KAAKL,MAAM8C,YAAYzC,KAAKF,MAAMwC,OAAOI,MAAM1C,KAAKF,MAAMY,QAC1D8B,EAAMG,mB,0BAGV,SAAaH,GACTxC,KAAK4C,SAAS,CAAElC,MAAO8B,EAAMK,OAAOnC,U,+BAGxC,c,oBAEA,WACI,OACI,sBAAKI,UAAU,SAAf,mBAEI,uBAAMgC,SAAU9C,KAAK+C,QAAQC,KAAKhD,MAAlC,UACI,2CAEI,uBACA,0BACIc,UAAU,aACVJ,MAAOV,KAAKF,MAAMY,MAClBuC,SAAUjD,KAAKkD,aAAaF,KAAKhD,WAGzC,uBACA,uBAAOmD,KAAK,SAASzC,MAAM,qB,GA3CLc,IAAMC,WCd3B2B,G,wDACjB,WAAYzD,GAAgB,IAAD,8BACvB,cAAMA,IAIV0D,YAAc,WACV,EAAK1D,MAAM2D,WAAW,IANC,EAQ3BC,aAAe,WACX,EAAK5D,MAAM2D,WAAW,KATC,EAW3BE,cAAgB,WACZ,EAAK7D,MAAM2D,WAAW,MAZC,EAc3BG,eAAiB,WACb,EAAK9D,MAAM2D,WAAW,MAfC,EAiB3BA,WAAa,WACT,EAAK3D,MAAM2D,WAAWI,SAAS,EAAK5D,MAAM6D,SAlBnB,EAqB3BC,iBAAmB,WACf,EAAKjE,MAAMkE,eAAeC,WAAW,EAAKhE,MAAMiE,YAtBzB,EAyB3BC,kBAAoB,SAACxB,GACjB,EAAKI,SAAS,CAAEe,MAAOnB,EAAMK,OAAOnC,SA1Bb,EA6B3BuD,qBAAuB,SAACzB,GACpB,EAAKI,SAAS,CAAEmB,SAAUvB,EAAMK,OAAOnC,SA5BvC,EAAKZ,MAAQ,CAAE6D,MAAO,GAAII,SAAU,IAFb,E,qDAiC3B,c,oBAEA,WACI,OACI,sBAAKjD,UAAU,WAAf,qBAEI,uBACA,wBAAQiC,QAAS/C,KAAKqD,YAAtB,wBACA,wBAAQN,QAAS/C,KAAKuD,aAAtB,yBACA,wBAAQR,QAAS/C,KAAKwD,cAAtB,0BACA,wBAAQT,QAAS/C,KAAKyD,eAAtB,2BACA,wBAAQV,QAAS/C,KAAKsD,WAAtB,wBACA,uBAAOH,KAAK,OAAOzC,MAAOV,KAAKF,MAAM6D,MAAOV,SAAUjD,KAAKgE,oBAC3D,uBACA,yBAAQjB,QAAS/C,KAAK4D,iBAAtB,0CAAsE5D,KAAKL,MAAMoE,SAAjF,SACA,uBAAOZ,KAAK,OAAOzC,MAAOV,KAAKF,MAAMiE,SAAUd,SAAUjD,KAAKiE,8B,GAjDxCzC,IAAMC,YCPtCyC,EAAYC,EAAQ,IAAaC,OAWlBC,E,kDACjB,WAAY1E,GAAgB,IAAD,8BACvB,cAAMA,IAWV2E,SAAW,SAACC,GACR,EAAK3B,SAAS,CAAE3C,MAAOsE,EAAU5D,YAAa,EAAGF,UAAW,CAAC,MAbtC,EAgB3BsC,QAAU,WACNnC,QAAQC,IAAI,EAAKf,MAAMG,QAjBA,EAoB3BqD,WAAa,SAACkB,GACV,EAAKC,WAAWD,IArBO,EAwB3BX,eAAiB,SAACE,GACd,EAAKnB,SAAS,CAAEmB,SAAUA,KAvB1B,EAAKjE,MAAQ,CACTG,MAAO,CAAEyE,WAAY,GAAIxE,aAAc,IACvC6D,SAAU,GACVpD,YAAa,EACbF,UAAW,IANQ,E,qDAU3B,c,wBAmBA,SAAWkD,GACP,IADuB,IAAD,kBACbpD,GACDoE,EAAY,IAAIC,IACpB,EAAK9E,MAAMG,MAAMC,aAAaC,SAAQ,SAACC,GAAD,OAAOuE,EAAUE,IAAIzE,EAAEE,KAAMF,EAAEM,MAAM,EAAKZ,MAAMa,YAAcJ,OACpG,EAAKT,MAAMG,MAAMyE,WAAWvE,SAAQ,SAAC2E,GAAD,OAAOH,EAAUE,IAAIC,EAAExE,KAAMwE,EAAEpE,UAEnE,EAAKZ,MAAMG,MAAMC,aAAaC,SAAQ,SAACC,GACnC,IAAI2E,EAAM,EAAKC,mBAAmB5E,EAAE6E,IAAKN,GAAa,EAAK7E,MAAMiE,SACjE3D,EAAEM,MAAML,KAAKD,EAAEM,MAAMN,EAAEM,MAAMqB,OAAS,GAAKgD,MAM/C,EAAKjF,MAAMW,UAAUJ,KAAK,EAAKP,MAAMW,UAAU,EAAKX,MAAMa,YAAcJ,GAAK,EAAKT,MAAMiE,WAbnFxD,EAAI,EAAGA,EAAIoD,EAAOpD,IAAK,CAAC,IACzBoE,EADwB,EAAvBpE,GAgBTP,KAAK4C,SAAS,CAAEjC,YAAaX,KAAKF,MAAMa,YAAcgD,M,gCAG1D,SAAmBuB,EAAaP,GAC5B,OAAOT,EAAUiB,SAASD,EAAKE,OAAOC,YAAYV,M,oBAGtD,WACI,OACI,uCAEI,wBAAQ5B,QAAS/C,KAAK+C,QAAtB,kBACA,mBAAGuC,KAAK,oCAAR,uBACA,cAAC,EAAD,CAAc7C,YAAazC,KAAKsE,WAChC,cAAC,EAAD,CACIhB,WAAYtD,KAAKsD,WACjBO,eAAgB7D,KAAK6D,eACrBE,SAAU/D,KAAKF,MAAMiE,WAEzB,cAAC,EAAD,CACI9D,MAAOD,KAAKF,MAAMG,MAClBQ,UAAWT,KAAKF,MAAMW,UACtBE,YAAaX,KAAKF,MAAMa,aACnBX,KAAKF,MAAMa,YAAc,SAElC,cAAC,EAAD,CAAOV,MAAOD,KAAKF,MAAMG,OAAYD,KAAKF,MAAMa,YAAc,gB,GAxE5Ca,IAAMC,WCJzB8D,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAEJC,SAASC,eAAe,SAM5Bb,M","file":"static/js/main.6048f089.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Chart from \"react-google-charts\";\r\n\r\nimport \"./Chart.css\";\r\nimport { CModel } from \"./Types\";\r\n\r\ninterface IProps {\r\n    model: CModel;\r\n    timeSteps: number[];\r\n    currentTick: number;\r\n}\r\n\r\ninterface IState {\r\n    data: any[];\r\n}\r\n\r\nexport default class MyChart extends React.Component<IProps, IState> {\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        var data = this.generateData();\r\n        this.state = {\r\n            data: data,\r\n        };\r\n    }\r\n\r\n    generateData() {\r\n        var data: any[] = [];\r\n        var header = [\"x\"];\r\n        this.props.model.compartments.forEach((c) => header.push(c.name));\r\n        data.push(header);\r\n        for (let i = 0; i <= this.props.currentTick; i++) {\r\n            var dataPoint = [this.props.timeSteps[i]];\r\n            this.props.model.compartments.forEach((c) => dataPoint.push(c.value[i]));\r\n            data.push(dataPoint);\r\n        }\r\n        console.log(data);\r\n\r\n        return data;\r\n    }\r\n\r\n    componentDidMount() {}\r\n\r\n    onClick() {}\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"chart\">\r\n                Chart\r\n                <Chart\r\n                    width={\"600px\"}\r\n                    height={\"400px\"}\r\n                    chartType=\"LineChart\"\r\n                    loader={<div>Loading Chart</div>}\r\n                    data={this.state.data}\r\n                    options={{\r\n                        hAxis: {\r\n                            title: \"Time\",\r\n                        },\r\n                        vAxis: {\r\n                            title: \"Value\",\r\n                        },\r\n                    }}\r\n                    rootProps={{ \"data-testid\": \"2\" }}\r\n                />\r\n                {\r\n                    //<button onClick={this.onClick.bind(this)}>Test</button>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport ForceGraph2D, { NodeObject } from \"react-force-graph-2d\";\r\n\r\nimport \"./Graph.css\";\r\nimport { CModel } from \"./Types\";\r\n\r\ninterface NodeType extends NodeObject {\r\n    size: number;\r\n}\r\n\r\ninterface IProps {\r\n    model: CModel;\r\n}\r\n\r\ninterface IState {\r\n    data: { nodes: { id: string; size: number }[]; links: { source: string; target: string }[] };\r\n}\r\n\r\nexport default class Graph extends React.Component<IProps, IState> {\r\n    constructor(props: IProps) {\r\n        super(props);\r\n\r\n        var data = this.generateInitialDataStructure();\r\n        console.log(data);\r\n\r\n        this.state = {\r\n            data: data,\r\n        };\r\n    }\r\n\r\n    generateInitialDataStructure() {\r\n        var node: { id: string; size: number }[] = [];\r\n        this.props.model.compartments.forEach((c) => {\r\n            node.push({ id: c.name, size: c.value[c.value.length - 1] });\r\n        });\r\n        var link: { source: string; target: string }[] = [];\r\n        //this.props.model.reactions.forEach((c) => {            link.push({ source: c.orig, target: c.dest });        });\r\n        return { nodes: node, links: link };\r\n    }\r\n\r\n    componentDidMount() {}\r\n\r\n    onClick() {}\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"graph\">\r\n                Graph\r\n                <ForceGraph2D\r\n                    graphData={this.state.data}\r\n                    nodeLabel=\"id\"\r\n                    nodeVal={(node) => (node as NodeType).size}\r\n                    width={500}\r\n                    height={500}\r\n                />\r\n                {\r\n                    //<button onClick={this.onClick.bind(this)}>Test</button>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport \"./ParserModule.css\";\r\nimport { CModel } from \"./Types\";\r\nimport { Parser, generate } from \"peggy\";\r\n\r\nvar modelGrammar = `{{\r\nfunction makeFloat(o) {\r\n    return parseFloat(o.join(\"\"), 10);\r\n}\r\n}}\r\n\r\nmodel = parameters:parameter* _ compartments:compartment+ {return {parameters, compartments};}\r\ncompartment = \"(\" _ \"comp\" _ name:ident _ value:value _ ODE:calc _ \")\" _ {return {name, value:[value], ODE};}\r\nparameter = \"(\" _ \"param\" _ name:ident _ value:value _ \")\" _ {return {name, value};}\r\nident = ident:[A-Za-z]+ {return ident.join(\"\")}\r\nvalue = digits:[0-9.]+ {return makeFloat(digits);}\r\n_ \"whitespace\" = [ \\\\t\\\\n\\\\r]*\r\ncalc = \"{\" calc:[^}]* \"}\" {return calc.join(\"\")}`;\r\n\r\ninterface IProps {\r\n    setNewModel: (newModel: CModel) => void;\r\n}\r\n\r\ninterface IState {\r\n    value: string;\r\n    parser: Parser;\r\n}\r\n\r\nexport default class ParserModule extends React.Component<IProps, IState> {\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        this.state = {\r\n            value: `(param alpha 0.75)\r\n(param beta 0.1)\r\n(param N 10000)\r\n\r\n(comp S 9999 {-alpha*S*I/N})\r\n(comp I 1 {alpha*S*I/N - beta*I})\r\n(comp R 0 {beta*I})`,\r\n            parser: generate(modelGrammar),\r\n        };\r\n    }\r\n\r\n    //Parse Model\r\n    onClick(event: any) {\r\n        //parse Input\r\n        this.props.setNewModel(this.state.parser.parse(this.state.value));\r\n        event.preventDefault();\r\n    }\r\n\r\n    handleChange(event: any) {\r\n        this.setState({ value: event.target.value });\r\n    }\r\n\r\n    componentDidMount() {}\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"parser\">\r\n                Parser\r\n                <form onSubmit={this.onClick.bind(this)}>\r\n                    <label>\r\n                        Model:\r\n                        <br />\r\n                        <textarea\r\n                            className=\"parserText\"\r\n                            value={this.state.value}\r\n                            onChange={this.handleChange.bind(this)}\r\n                        />\r\n                    </label>\r\n                    <br />\r\n                    <input type=\"submit\" value=\"Submit\" />\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport \"./Settings.css\";\r\n\r\ninterface IProps {\r\n    onSimulate: (n: number) => void;\r\n    changeStepSize: (stepSize: number) => void;\r\n    stepSize: number;\r\n}\r\n\r\ninterface IState {\r\n    steps: string;\r\n    stepSize: string;\r\n}\r\n\r\nexport default class Settings extends React.Component<IProps, IState> {\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        this.state = { steps: \"\", stepSize: \"\" };\r\n    }\r\n\r\n    onSimulate1 = () => {\r\n        this.props.onSimulate(1);\r\n    };\r\n    onSimulate10 = () => {\r\n        this.props.onSimulate(10);\r\n    };\r\n    onSimulate100 = () => {\r\n        this.props.onSimulate(100);\r\n    };\r\n    onSimulate1000 = () => {\r\n        this.props.onSimulate(1000);\r\n    };\r\n    onSimulate = () => {\r\n        this.props.onSimulate(parseInt(this.state.steps));\r\n    };\r\n\r\n    onChangeStepSize = () => {\r\n        this.props.changeStepSize(parseFloat(this.state.stepSize));\r\n    };\r\n\r\n    handleChangeSteps = (event: any) => {\r\n        this.setState({ steps: event.target.value });\r\n    };\r\n\r\n    handleChangeStepSize = (event: any) => {\r\n        this.setState({ stepSize: event.target.value });\r\n    };\r\n\r\n    componentDidMount() {}\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"settings\">\r\n                Settings\r\n                <br />\r\n                <button onClick={this.onSimulate1}>Simulate 1</button>\r\n                <button onClick={this.onSimulate10}>Simulate 10</button>\r\n                <button onClick={this.onSimulate100}>Simulate 100</button>\r\n                <button onClick={this.onSimulate1000}>Simulate 1000</button>\r\n                <button onClick={this.onSimulate}>Simulate: </button>\r\n                <input type=\"text\" value={this.state.steps} onChange={this.handleChangeSteps} />\r\n                <br />\r\n                <button onClick={this.onChangeStepSize}>Change Step Size (currently: {this.props.stepSize}): </button>\r\n                <input type=\"text\" value={this.state.stepSize} onChange={this.handleChangeStepSize} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport { CModel } from \"./Types\";\r\nimport MyChart from \"./Chart\";\r\nimport Graph from \"./Graph\";\r\nimport ParserModule from \"./ParserModule\";\r\nimport Settings from \"./Settings\";\r\n\r\nconst Evaluator = require(\"expr-eval\").Parser;\r\n\r\ninterface IProps {}\r\n\r\ninterface IState {\r\n    model: CModel;\r\n    timeSteps: number[];\r\n    stepSize: number;\r\n    currentTick: number;\r\n}\r\n\r\nexport default class Main extends React.Component<IProps, IState> {\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        this.state = {\r\n            model: { parameters: [], compartments: [] },\r\n            stepSize: 0.1,\r\n            currentTick: 0,\r\n            timeSteps: [],\r\n        };\r\n    }\r\n\r\n    componentDidMount() {}\r\n\r\n    setModel = (newModel: CModel) => {\r\n        this.setState({ model: newModel, currentTick: 0, timeSteps: [0] });\r\n    };\r\n\r\n    onClick = () => {\r\n        console.log(this.state.model);\r\n    };\r\n\r\n    onSimulate = (n: number) => {\r\n        this.solveSteps(n);\r\n    };\r\n\r\n    changeStepSize = (stepSize: number) => {\r\n        this.setState({ stepSize: stepSize });\r\n    };\r\n\r\n    //simple Solver\r\n    solveSteps(steps: number) {\r\n        for (let i = 0; i < steps; i++) {\r\n            var variables = new Map();\r\n            this.state.model.compartments.forEach((c) => variables.set(c.name, c.value[this.state.currentTick + i]));\r\n            this.state.model.parameters.forEach((p) => variables.set(p.name, p.value)); //TODO insert Constant at parse time\r\n            //calculate Step\r\n            this.state.model.compartments.forEach((c) => {\r\n                var res = this.evaluateExpression(c.ODE, variables) * this.state.stepSize;\r\n                c.value.push(c.value[c.value.length - 1] + res);\r\n            });\r\n\r\n            //apply Delta\r\n\r\n            //save Timestamps for variable step size\r\n            this.state.timeSteps.push(this.state.timeSteps[this.state.currentTick + i] + this.state.stepSize);\r\n        }\r\n        //endCurrentTick\r\n        this.setState({ currentTick: this.state.currentTick + steps });\r\n    }\r\n\r\n    evaluateExpression(exp: string, variables: Map<string, number>): number {\r\n        return Evaluator.evaluate(exp, Object.fromEntries(variables));\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                Test\r\n                <button onClick={this.onClick}>Test</button>\r\n                <a href=\"https://github.com/NeverfullD/cmv\">to Github</a>\r\n                <ParserModule setNewModel={this.setModel} />\r\n                <Settings\r\n                    onSimulate={this.onSimulate}\r\n                    changeStepSize={this.changeStepSize}\r\n                    stepSize={this.state.stepSize}\r\n                />\r\n                <MyChart\r\n                    model={this.state.model}\r\n                    timeSteps={this.state.timeSteps}\r\n                    currentTick={this.state.currentTick}\r\n                    key={this.state.currentTick + \"chart\"}\r\n                />\r\n                <Graph model={this.state.model} key={this.state.currentTick + \"graph\"} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Main from \"./Main\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Main />\n    </React.StrictMode>,\n    document.getElementById(\"root\"),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}