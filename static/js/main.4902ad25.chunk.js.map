{"version":3,"sources":["Solver.ts","Chart.tsx","Graph.tsx","ParserModule.tsx","Settings.tsx","Main.tsx","reportWebVitals.ts","index.tsx"],"names":["Solver","stepSize","timeStep","model","this","exp","variables","evaluate","Object","fromEntries","Map","compartments","forEach","c","set","name","value","length","EulerMethod","generateVariables","res","k","evaluateExpression","ODE","result","RungeKutta2Method","interVariables","k1","k2","RungeKutta4Base","allK","get","push","k3","k4","RungeKutta4Method","calculateStep","RungeKutta4AutomaticMethod","error","errors","maxError","resOneStep","resTwoStep","Array","from","values","v","i","Math","abs","reduce","p","BulirschStoerMethod","depth","triangleMatrix","n","m","modifiedMidpointMethod","Rnm","val","h","midpoints","lastPoint","z1","zm1","zm","MyChart","props","data","generateData","state","header","dataPoint","timeSteps","currentTick","className","width","height","chartType","loader","options","hAxis","title","vAxis","rootProps","React","Component","Graph","generateInitialDataStructure","node","id","size","link","symbols","sym","source","target","nodes","links","graphData","nodeLabel","nodeVal","Evaluator","require","Parser","ParserModule","parser","generate","hasError","message","location","event","parse","constants","parameters","simplify","setNewModel","setState","start","line","column","console","log","preventDefault","renderError","onSubmit","onClick","bind","onChange","handleChange","type","Settings","onSimulate1","onSimulate","onSimulate10","onSimulate100","onSimulate1000","parseInt","steps","onChangeStepSize","changeStepSize","parseFloat","handleChangeSteps","handleChangeStepSize","handleSelectedSolver","changeSelectedSolver","selectedSolver","Main","setModel","newModel","solver","getSolver","solveSteps","applyResult","execute","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4902ad25.chunk.js","sourcesContent":["import { Expression } from \"expr-eval\";\r\nimport { CModel } from \"./Types\";\r\n\r\nexport interface Result {\r\n    result: Map<string, number>;\r\n    timeStep: number;\r\n}\r\n\r\nexport abstract class Solver {\r\n    stepSize: number;\r\n    timeStep: number;\r\n    model: CModel;\r\n\r\n    constructor(stepSize: number, timeStep: number, model: CModel) {\r\n        this.stepSize = stepSize;\r\n        this.timeStep = timeStep;\r\n        this.model = model;\r\n    }\r\n\r\n    abstract execute(): Result;\r\n\r\n    evaluateExpression(exp: Expression, variables: Map<string, number>): number {\r\n        return exp.evaluate(Object.fromEntries(variables));\r\n    }\r\n\r\n    generateVariables() {\r\n        var variables: Map<string, number> = new Map();\r\n        this.model.compartments.forEach((c) => variables.set(c.name, c.value[c.value.length - 1]));\r\n        return variables;\r\n    }\r\n}\r\n\r\nexport class EulerMethod extends Solver {\r\n    execute() {\r\n        var variables = this.generateVariables();\r\n        var res: Map<string, number> = new Map();\r\n        this.model.compartments.forEach((c) => {\r\n            var k = this.evaluateExpression(c.ODE, variables) * this.stepSize;\r\n            res.set(c.name, c.value[c.value.length - 1] + k);\r\n        });\r\n        this.timeStep = this.timeStep + this.stepSize;\r\n        return {\r\n            result: res,\r\n            timeStep: this.timeStep,\r\n        };\r\n    }\r\n}\r\n\r\nexport class RungeKutta2Method extends Solver {\r\n    execute() {\r\n        var variables = this.generateVariables();\r\n        var res: Map<string, number> = new Map();\r\n        var interVariables = new Map(variables); //contains variable values at half point of the step\r\n        this.model.compartments.forEach((c) => {\r\n            var k1 = this.evaluateExpression(c.ODE, variables) * (this.stepSize / 2);\r\n            interVariables.set(c.name, c.value[c.value.length - 1] + k1);\r\n        });\r\n\r\n        this.model.compartments.forEach((c) => {\r\n            var k2 = this.evaluateExpression(c.ODE, interVariables) * this.stepSize;\r\n            res.set(c.name, c.value[c.value.length - 1] + k2);\r\n        });\r\n        this.timeStep = this.timeStep + this.stepSize;\r\n        return {\r\n            result: res,\r\n            timeStep: this.timeStep,\r\n        };\r\n    }\r\n}\r\n\r\nabstract class RungeKutta4Base extends Solver {\r\n    calculateStep(variables: Map<string, number>, stepSize: number) {\r\n        var res: Map<string, number> = new Map();\r\n        var interVariables = new Map(variables); //contains variables for intermediary steps\r\n        var allK = new Map();\r\n        //calc k1\r\n        this.model.compartments.forEach((c) => {\r\n            var k1 = this.evaluateExpression(c.ODE, variables) * stepSize;\r\n            interVariables.set(c.name, variables.get(c.name)! + k1 / 2);\r\n            allK.set(c.name, [k1]);\r\n        });\r\n        //calc k2\r\n        this.model.compartments.forEach((c) => {\r\n            var k2 = this.evaluateExpression(c.ODE, interVariables) * stepSize;\r\n            interVariables.set(c.name, variables.get(c.name)! + k2 / 2);\r\n            allK.get(c.name).push(k2);\r\n        });\r\n        //calc k3\r\n        this.model.compartments.forEach((c) => {\r\n            var k3 = this.evaluateExpression(c.ODE, interVariables) * stepSize;\r\n            interVariables.set(c.name, variables.get(c.name)! + k3);\r\n            allK.get(c.name).push(k3);\r\n        });\r\n        //calc k4\r\n        this.model.compartments.forEach((c) => {\r\n            var k4 = this.evaluateExpression(c.ODE, interVariables) * stepSize;\r\n            allK.get(c.name).push(k4);\r\n        });\r\n        //calc y_n+1\r\n        this.model.compartments.forEach((c) => {\r\n            res.set(\r\n                c.name,\r\n                variables.get(c.name)! +\r\n                    (1 / 6) * allK.get(c.name)[0] + //k1\r\n                    (2 / 6) * allK.get(c.name)[1] + //k2\r\n                    (2 / 6) * allK.get(c.name)[2] + //k3\r\n                    (1 / 6) * allK.get(c.name)[3], //k4\r\n            );\r\n        });\r\n        return res;\r\n    }\r\n}\r\n\r\nexport class RungeKutta4Method extends RungeKutta4Base {\r\n    execute() {\r\n        var variables = this.generateVariables();\r\n        this.timeStep = this.timeStep + this.stepSize;\r\n        return {\r\n            result: this.calculateStep(variables, this.stepSize),\r\n            timeStep: this.timeStep,\r\n        };\r\n    }\r\n}\r\n\r\nexport class RungeKutta4AutomaticMethod extends RungeKutta4Base {\r\n    error: number;\r\n\r\n    constructor(stepSize: number, timeStep: number, model: CModel) {\r\n        super(stepSize, timeStep, model);\r\n        this.error = 0;\r\n    }\r\n\r\n    execute() {\r\n        var errors: number[] = [];\r\n        const maxError = 0.01;\r\n        var variables = this.generateVariables();\r\n        do {\r\n            //error control handling\r\n            //small error increase stepSize\r\n            if (this.error < maxError / 4) {\r\n                this.stepSize = this.stepSize * 2;\r\n            }\r\n            //big error decrease stepSize\r\n            else if (this.error > maxError) {\r\n                this.stepSize = this.stepSize / 2;\r\n            }\r\n            var resOneStep = this.calculateStep(variables, this.stepSize);\r\n            var resTwoStep = this.calculateStep(this.calculateStep(variables, this.stepSize / 2), this.stepSize / 2);\r\n\r\n            Array.from(resOneStep.values()).forEach((v, i) => {\r\n                errors.push(Math.abs(Array.from(resTwoStep.values())[i] - v));\r\n            });\r\n            this.error = errors.reduce((p, c) => p + c, 0) / errors.length;\r\n        } while (this.error > maxError);\r\n\r\n        this.timeStep = this.timeStep + this.stepSize;\r\n        return {\r\n            result: resTwoStep,\r\n            timeStep: this.timeStep,\r\n        };\r\n    }\r\n}\r\n\r\nexport class BulirschStoerMethod extends Solver {\r\n    error: number;\r\n    depth: number;\r\n\r\n    constructor(stepSize: number, timeStep: number, model: CModel, depth: number) {\r\n        super(stepSize, timeStep, model);\r\n        this.error = 0;\r\n        this.depth = depth;\r\n    }\r\n\r\n    //Bulirsch-Stoer Method\r\n    execute() {\r\n        var variables = this.generateVariables();\r\n        const maxError = 0.001;\r\n        const maxDepth = 8; // how many rows to be calculated\r\n\r\n        var triangleMatrix: Map<string, number>[][] = [];\r\n\r\n        //error controlling loop\r\n        do {\r\n            //error control handling\r\n            //small error decrease depth or increase stepSize\r\n            if (this.error < maxError / 2) {\r\n                if (this.depth > 2) {\r\n                    this.depth = this.depth - 1;\r\n                } else {\r\n                    this.stepSize = this.stepSize * 2;\r\n                    this.depth = this.depth + 1;\r\n                }\r\n            }\r\n            //big error increase depth or decrease stepSize\r\n            else if (this.error > maxError) {\r\n                if (this.depth < maxDepth) {\r\n                    this.depth = this.depth + 1;\r\n                } else {\r\n                    this.stepSize = this.stepSize / 2;\r\n                    this.depth = this.depth - 1;\r\n                }\r\n            }\r\n\r\n            var errors: number[] = [];\r\n            for (let n = 0; n < this.depth; n++) {\r\n                //rows\r\n                triangleMatrix[n] = [];\r\n                for (let m = 0; m <= n; m++) {\r\n                    //columns\r\n                    if (m === 0) {\r\n                        //steps = 2(i+1)\r\n                        triangleMatrix[n][m] = this.modifiedMidpointMethod(variables, 2 * (n + 1));\r\n                    } else {\r\n                        //extrapolation\r\n                        var Rnm: Map<string, number> = new Map();\r\n                        this.model.compartments.forEach((c) => {\r\n                            var val =\r\n                                triangleMatrix[n][m - 1].get(c.name)! +\r\n                                (triangleMatrix[n][m - 1].get(c.name)! - triangleMatrix[n - 1][m - 1].get(c.name)!) /\r\n                                    ((n / (n - 1)) ** (2 * m) - 1);\r\n                            Rnm.set(c.name, val);\r\n\r\n                            //error control\r\n                            //only take error from best estimate\r\n                            if (m === n && n === this.depth - 1) {\r\n                                errors.push(\r\n                                    Math.abs(\r\n                                        (triangleMatrix[n][m - 1].get(c.name)! -\r\n                                            triangleMatrix[n - 1][m - 1].get(c.name)!) /\r\n                                            ((n / (n - 1)) ** (2 * m) - 1),\r\n                                    ),\r\n                                );\r\n                            }\r\n                        }); //end forEach\r\n                        triangleMatrix[n][m] = Rnm;\r\n                    } //end elsif\r\n                } //end inner loop\r\n            } //end outer loop\r\n            this.error = errors.reduce((p, c) => p + c, 0) / errors.length;\r\n        } while (this.error > maxError); //end error control loop\r\n        this.timeStep = this.timeStep + this.stepSize;\r\n        return {\r\n            result: triangleMatrix[triangleMatrix.length - 1][triangleMatrix[triangleMatrix.length - 1].length - 1],\r\n            timeStep: this.timeStep,\r\n        };\r\n    }\r\n\r\n    //modified midpoint method\r\n    modifiedMidpointMethod(variables: Map<string, number>, n: number) {\r\n        //stepSize == H\r\n        //h == H/n\r\n        var h = this.stepSize / n;\r\n        var interVariables = new Map(variables); //contains variables for intermediary steps\r\n        var midpoints: Map<string, number[]> = new Map();\r\n        var lastPoint: Map<string, number> = new Map();\r\n\r\n        //z0 == yn == current state\r\n        //z1 = z0 + h * f(x, z0)\r\n        this.model.compartments.forEach((c) => {\r\n            var k = this.evaluateExpression(c.ODE, interVariables);\r\n            var z1 = c.value[c.value.length - 1] + h * k;\r\n\r\n            interVariables.set(c.name, z1);\r\n            midpoints.set(c.name, [c.value[c.value.length - 1], z1]);\r\n        });\r\n\r\n        //zm+1 = zm−1 + 2h ∗ f(x + m ∗ h, zm) with m = 1, 2, ..., n − 1\r\n        for (let m = 1; m < n; m++) {\r\n            this.model.compartments.forEach((c) => {\r\n                var k = this.evaluateExpression(c.ODE, interVariables);\r\n                var zm1 = midpoints.get(c.name)![m - 1] + 2 * h * k;\r\n\r\n                interVariables.set(c.name, zm1);\r\n                midpoints.get(c.name)!.push(zm1);\r\n            });\r\n        }\r\n\r\n        //y(x + H) ≈ yn ≡ 1/2*(zn + zn−1 + h ∗ f(x + H, zn))\r\n        this.model.compartments.forEach((c) => {\r\n            var k = this.evaluateExpression(c.ODE, interVariables);\r\n            var zm = (1 / 2) * (midpoints.get(c.name)![n] + midpoints.get(c.name)![n - 1] + h * k);\r\n            lastPoint.set(c.name, zm);\r\n        });\r\n        return lastPoint;\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport Chart from \"react-google-charts\";\r\n\r\nimport \"./Chart.css\";\r\nimport { CModel } from \"./Types\";\r\n\r\ninterface IProps {\r\n    model: CModel;\r\n    timeSteps: number[];\r\n    currentTick: number;\r\n}\r\n\r\ninterface IState {\r\n    data: any[];\r\n}\r\n\r\nexport default class MyChart extends React.Component<IProps, IState> {\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        var data = this.generateData();\r\n        this.state = {\r\n            data: data,\r\n        };\r\n    }\r\n\r\n    generateData() {\r\n        var data: any[] = [];\r\n        var header = [\"x\"];\r\n        this.props.model.compartments.forEach((c) => header.push(c.name));\r\n        data.push(header);\r\n        for (let i = 0; i <= this.props.currentTick; i++) {\r\n            var dataPoint = [this.props.timeSteps[i]];\r\n            this.props.model.compartments.forEach((c) => dataPoint.push(c.value[i]));\r\n            data.push(dataPoint);\r\n        }\r\n        //console.log(data);\r\n\r\n        return data;\r\n    }\r\n\r\n    componentDidMount() {}\r\n\r\n    onClick() {}\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"chart\">\r\n                Chart\r\n                <Chart\r\n                    width={\"600px\"}\r\n                    height={\"400px\"}\r\n                    chartType=\"LineChart\"\r\n                    loader={<div>Loading Chart</div>}\r\n                    data={this.state.data}\r\n                    options={{\r\n                        hAxis: {\r\n                            title: \"Time\",\r\n                        },\r\n                        vAxis: {\r\n                            title: \"Value\",\r\n                        },\r\n                    }}\r\n                    rootProps={{ \"data-testid\": \"2\" }}\r\n                />\r\n                {\r\n                    //<button onClick={this.onClick.bind(this)}>Test</button>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport ForceGraph2D, { NodeObject } from \"react-force-graph-2d\";\r\n\r\nimport \"./Graph.css\";\r\nimport { CModel } from \"./Types\";\r\n\r\ninterface NodeType extends NodeObject {\r\n    size: number;\r\n}\r\n\r\ninterface IProps {\r\n    model: CModel;\r\n}\r\n\r\ninterface IState {\r\n    data: { nodes: { id: string; size: number }[]; links: { source: string; target: string }[] };\r\n}\r\n\r\nexport default class Graph extends React.Component<IProps, IState> {\r\n    constructor(props: IProps) {\r\n        super(props);\r\n\r\n        var data = this.generateInitialDataStructure();\r\n        //console.log(data);\r\n\r\n        this.state = {\r\n            data: data,\r\n        };\r\n    }\r\n\r\n    generateInitialDataStructure() {\r\n        var node: { id: string; size: number }[] = [];\r\n        this.props.model.compartments.forEach((c) => {\r\n            node.push({ id: c.name, size: 10 });\r\n        });\r\n        var link: { source: string; target: string }[] = [];\r\n        this.props.model.compartments.forEach((c) => {\r\n            c.ODE.symbols().forEach((sym) => link.push({ source: c.name, target: sym }));\r\n        });\r\n        return { nodes: node, links: link };\r\n    }\r\n\r\n    componentDidMount() {}\r\n\r\n    onClick() {}\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"graph\">\r\n                Graph\r\n                <ForceGraph2D\r\n                    graphData={this.state.data}\r\n                    nodeLabel=\"id\"\r\n                    nodeVal={(node) => (node as NodeType).size}\r\n                    width={500}\r\n                    height={500}\r\n                />\r\n                {\r\n                    //<button onClick={this.onClick.bind(this)}>Test</button>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport \"./ParserModule.css\";\r\nimport { CModel } from \"./Types\";\r\nimport { Parser, generate } from \"peggy\";\r\nconst Evaluator = require(\"expr-eval\").Parser;\r\n\r\nconst modelGrammar = `{{\r\nfunction makeFloat(o) {\r\n    return parseFloat(o.join(\"\"), 10);\r\n}\r\n}}\r\n\r\nmodel = parameters:parameter* _ compartments:compartment+ {return {parameters, compartments};}\r\ncompartment = \"(\" _ \"comp\" _ name:ident _ value:value _ ODE:calc _ \")\" _ {return {name, value:[value], ODE};}\r\nparameter = \"(\" _ \"param\" _ name:ident _ value:value _ \")\" _ {return {name, value};}\r\nident = ident:[A-Za-z]+ {return ident.join(\"\")}\r\nvalue = digits:[0-9.]+ {return makeFloat(digits);}\r\n_ \"whitespace\" = [ \\\\t\\\\n\\\\r]*\r\ncalc = \"{\" calc:[^}]* \"}\" {return calc.join(\"\")}`;\r\n\r\ninterface IProps {\r\n    setNewModel: (newModel: CModel) => void;\r\n}\r\n\r\ninterface ParseError {\r\n    hasError: boolean;\r\n    message: string;\r\n    location: string;\r\n}\r\n\r\ninterface IState {\r\n    value: string;\r\n    parser: Parser;\r\n    error: ParseError;\r\n}\r\n\r\nexport default class ParserModule extends React.Component<IProps, IState> {\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        this.state = {\r\n            value: `(param alpha 0.75)\r\n(param beta 0.1)\r\n(param N 10000)\r\n\r\n(comp S 9999 {-alpha*S*I/N})\r\n(comp I 1 {alpha*S*I/N - beta*I})\r\n(comp R 0 {beta*I})`,\r\n            parser: generate(modelGrammar),\r\n            error: { hasError: false, message: \"\", location: \"\" },\r\n        };\r\n    }\r\n\r\n    //Parse Model\r\n    onClick(event: any) {\r\n        //parse Input\r\n        try {\r\n            var model: CModel = this.state.parser.parse(this.state.value);\r\n            //insert constants\r\n            var constants = new Map();\r\n            model.parameters.forEach((p) => constants.set(p.name, p.value));\r\n            model.compartments.forEach((c) => (c.ODE = Evaluator.parse(c.ODE).simplify(Object.fromEntries(constants))));\r\n            //set model\r\n            this.props.setNewModel(model);\r\n            //no error\r\n            this.setState({ error: { hasError: false, message: \"\", location: \"\" } });\r\n        } catch (error) {\r\n            this.setState({\r\n                error: {\r\n                    hasError: true,\r\n                    message: error.message,\r\n                    location: \"at line: \" + error.location.start.line + \" at column: \" + error.location.start.column,\r\n                },\r\n            });\r\n\r\n            console.log(error);\r\n        }\r\n\r\n        event.preventDefault();\r\n    }\r\n\r\n    handleChange(event: any) {\r\n        this.setState({ value: event.target.value });\r\n    }\r\n\r\n    componentDidMount() {}\r\n\r\n    renderError() {\r\n        if (this.state.error.hasError) {\r\n            return (\r\n                <div>\r\n                    Error: {this.state.error.message} at {this.state.error.location}\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n\r\n    render() {\r\n        var error = this.renderError();\r\n        return (\r\n            <div className=\"parser\">\r\n                Parser\r\n                {error}\r\n                <form onSubmit={this.onClick.bind(this)}>\r\n                    <label>\r\n                        Model:\r\n                        <br />\r\n                        <textarea\r\n                            className=\"parserText\"\r\n                            value={this.state.value}\r\n                            onChange={this.handleChange.bind(this)}\r\n                        />\r\n                    </label>\r\n                    <br />\r\n                    <input type=\"submit\" value=\"Submit\" />\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport \"./Settings.css\";\r\n\r\ninterface IProps {\r\n    onSimulate: (n: number) => void;\r\n    changeStepSize: (stepSize: number) => void;\r\n    stepSize: number;\r\n    selectedSolver: string;\r\n    changeSelectedSolver: (selectedSolver: string) => void;\r\n}\r\n\r\ninterface IState {\r\n    steps: string;\r\n    stepSize: string;\r\n}\r\n\r\nexport default class Settings extends React.Component<IProps, IState> {\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        this.state = { steps: \"\", stepSize: \"\" };\r\n    }\r\n\r\n    onSimulate1 = () => {\r\n        this.props.onSimulate(1);\r\n    };\r\n    onSimulate10 = () => {\r\n        this.props.onSimulate(10);\r\n    };\r\n    onSimulate100 = () => {\r\n        this.props.onSimulate(100);\r\n    };\r\n    onSimulate1000 = () => {\r\n        this.props.onSimulate(1000);\r\n    };\r\n    onSimulate = () => {\r\n        this.props.onSimulate(parseInt(this.state.steps));\r\n    };\r\n\r\n    onChangeStepSize = () => {\r\n        this.props.changeStepSize(parseFloat(this.state.stepSize));\r\n    };\r\n\r\n    handleChangeSteps = (event: any) => {\r\n        this.setState({ steps: event.target.value });\r\n    };\r\n\r\n    handleChangeStepSize = (event: any) => {\r\n        this.setState({ stepSize: event.target.value });\r\n    };\r\n\r\n    handleSelectedSolver = (event: any) => {\r\n        this.props.changeSelectedSolver(event.target.value);\r\n    };\r\n\r\n    componentDidMount() {}\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"settings\">\r\n                Settings\r\n                <br />\r\n                <button onClick={this.onSimulate1}>Simulate 1</button>\r\n                <button onClick={this.onSimulate10}>Simulate 10</button>\r\n                <button onClick={this.onSimulate100}>Simulate 100</button>\r\n                <button onClick={this.onSimulate1000}>Simulate 1000</button>\r\n                <button onClick={this.onSimulate}>Simulate: </button>\r\n                <input type=\"text\" value={this.state.steps} onChange={this.handleChangeSteps} />\r\n                <br />\r\n                <button onClick={this.onChangeStepSize}>Change Step Size (currently: {this.props.stepSize}): </button>\r\n                <input type=\"text\" value={this.state.stepSize} onChange={this.handleChangeStepSize} />\r\n                <br />\r\n                <label>Choose a Solver:</label>\r\n                <select value={this.props.selectedSolver} onChange={this.handleSelectedSolver}>\r\n                    <option value=\"euler\">Euler</option>\r\n                    <option value=\"rungeKutta2\">Runge-Kutta 2.Order</option>\r\n                    <option value=\"rungeKutta4\">Runge-Kutta 4.Order</option>\r\n                    <option value=\"rungeKutta4Automatic\">Runge-Kutta 4.Order Automatic</option>\r\n                    <option value=\"bulirschStoer\">Bulirsch-Stoer</option>\r\n                </select>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport { CModel } from \"./Types\";\r\nimport {\r\n    BulirschStoerMethod,\r\n    EulerMethod,\r\n    Result,\r\n    RungeKutta2Method,\r\n    RungeKutta4AutomaticMethod,\r\n    RungeKutta4Method,\r\n    Solver,\r\n} from \"./Solver\";\r\nimport MyChart from \"./Chart\";\r\nimport Graph from \"./Graph\";\r\nimport ParserModule from \"./ParserModule\";\r\nimport Settings from \"./Settings\";\r\n\r\ninterface IProps {}\r\n\r\ninterface IState {\r\n    model: CModel;\r\n    timeSteps: number[];\r\n    currentTick: number;\r\n    stepSize: number;\r\n    solver: Solver;\r\n    selectedSolver: string;\r\n}\r\n\r\nexport default class Main extends React.Component<IProps, IState> {\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        this.state = {\r\n            model: { parameters: [], compartments: [] },\r\n            currentTick: 0,\r\n            timeSteps: [],\r\n            stepSize: 0.1,\r\n            solver: new EulerMethod(0, 0, { parameters: [], compartments: [] }),\r\n            selectedSolver: \"euler\",\r\n        };\r\n    }\r\n\r\n    componentDidMount() {}\r\n\r\n    onClick = () => {\r\n        console.log(this.state);\r\n    };\r\n\r\n    //handle Settings\r\n    setModel = (newModel: CModel) => {\r\n        this.setState({\r\n            model: newModel,\r\n            currentTick: 0,\r\n            timeSteps: [0],\r\n            solver: this.getSolver(this.state.selectedSolver, 0, newModel),\r\n        });\r\n    };\r\n\r\n    onSimulate = (n: number) => {\r\n        this.solveSteps(n);\r\n    };\r\n\r\n    changeStepSize = (stepSize: number) => {\r\n        this.setState({ stepSize: stepSize });\r\n    };\r\n\r\n    changeSelectedSolver = (selectedSolver: string) => {\r\n        this.setState({\r\n            selectedSolver: selectedSolver,\r\n            solver: this.getSolver(\r\n                selectedSolver,\r\n                this.state.timeSteps[this.state.timeSteps.length - 1],\r\n                this.state.model,\r\n            ),\r\n        });\r\n    };\r\n\r\n    getSolver(selectedSolver: string, timeStep: number, model: CModel): Solver {\r\n        switch (selectedSolver) {\r\n            case \"euler\":\r\n                return new EulerMethod(this.state.stepSize, timeStep, model);\r\n            case \"rungeKutta2\":\r\n                return new RungeKutta2Method(this.state.stepSize, timeStep, model);\r\n            case \"rungeKutta4\":\r\n                return new RungeKutta4Method(this.state.stepSize, timeStep, model);\r\n            case \"rungeKutta4Automatic\":\r\n                return new RungeKutta4AutomaticMethod(this.state.stepSize, timeStep, model);\r\n            case \"bulirschStoer\":\r\n                return new BulirschStoerMethod(this.state.stepSize, timeStep, model, 4);\r\n            default:\r\n                return new EulerMethod(this.state.stepSize, timeStep, model);\r\n        }\r\n    }\r\n\r\n    //simulation Core\r\n    applyResult(res: Result) {\r\n        this.state.model.compartments.forEach((c) => {\r\n            c.value.push(res.result.get(c.name)!);\r\n        });\r\n        //save Timestamps for variable step size\r\n        this.state.timeSteps.push(res.timeStep);\r\n    }\r\n\r\n    //Main for solvers\r\n    solveSteps(steps: number) {\r\n        for (let i = 0; i < steps; i++) {\r\n            //calculate Step\r\n            this.applyResult(this.state.solver.execute());\r\n        }\r\n        //endCurrentTick\r\n        this.setState({ currentTick: this.state.currentTick + steps });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                Test\r\n                <button onClick={this.onClick}>Test</button>\r\n                <a href=\"https://github.com/NeverfullD/cmv\">to Github</a>\r\n                <ParserModule setNewModel={this.setModel} />\r\n                <Settings\r\n                    onSimulate={this.onSimulate}\r\n                    changeStepSize={this.changeStepSize}\r\n                    stepSize={this.state.stepSize}\r\n                    selectedSolver={this.state.selectedSolver}\r\n                    changeSelectedSolver={this.changeSelectedSolver}\r\n                />\r\n                <MyChart\r\n                    model={this.state.model}\r\n                    timeSteps={this.state.timeSteps}\r\n                    currentTick={this.state.currentTick}\r\n                    key={this.state.currentTick + \"chart\"}\r\n                />\r\n                <Graph model={this.state.model} key={this.state.currentTick + \"graph\"} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Main from \"./Main\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Main />\n    </React.StrictMode>,\n    document.getElementById(\"root\"),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}