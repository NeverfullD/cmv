{"version":3,"sources":["model.js","Chart.tsx","Graph.tsx","Parser.tsx","Settings.tsx","Main.tsx","reportWebVitals.ts","index.tsx"],"names":["extend","destination","source","key","inherit","subclass","parent","chain","prototype","constructor","TreeNode","text","offset","elements","this","forEach","block","context","el","i","n","length","call","TreeNode1","apply","arguments","TreeNode2","TreeNode3","FAILURE","Grammar","_read_model","address0","index0","_offset","_cache","_model","cached","index1","elements0","Array","address1","remaining0","index2","elements1","address2","_read_compartment","push","_input","substring","address3","index3","_read_whitespace","address4","remaining1","index4","elements2","address5","_read_parameter","address6","index5","address7","remaining2","index6","elements3","address8","_read_reaction","_compartment","chunk0","_inputSize","toLowerCase","_failure","_expected","chunk1","_read_ident","_read_value","address9","chunk2","address10","_parameter","_reaction","_read_orig","_read_dest","_read_calc","address11","address12","index7","_orig","_dest","_ident","test","_value","_whitespace","_calc","Parser","input","actions","types","_actions","_types","parse","tree","lastError","expected","SyntaxError","lines","split","lineNo","position","message","join","line","formatError","exports","options","Chart","props","className","React","Component","Graph","graphData","nodes","id","links","target","nodeLabel","width","height","model","require","cModel","compartments","parameters","reactions","state","value","comp","name","param","react","orig","dest","event","makeCompartment","bind","makeParameter","makeReaction","setState","preventDefault","onSubmit","onClick","onChange","handleChange","type","Settings","Main","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f8e354f9.chunk.js","sourcesContent":["/**\n * This file was generated from model.peg\n * See http://canopy.jcoglan.com/ for documentation.\n */\n\n(function() {\n  'use strict';\n\n  var extend = function(destination, source) {\n    if (!destination || !source) return destination;\n    for (var key in source) {\n      if (destination[key] !== source[key])\n        destination[key] = source[key];\n    }\n    return destination;\n  };\n\n  var formatError = function(input, offset, expected) {\n    var lines = input.split(/\\n/g),\n        lineNo = 0,\n        position = 0;\n\n    while (position <= offset) {\n      position += lines[lineNo].length + 1;\n      lineNo += 1;\n    }\n    var message = 'Line ' + lineNo + ': expected ' + expected.join(', ') + '\\n',\n        line = lines[lineNo - 1];\n\n    message += line + '\\n';\n    position -= line.length + 1;\n\n    while (position < offset) {\n      message += ' ';\n      position += 1;\n    }\n    return message + '^';\n  };\n\n  var inherit = function(subclass, parent) {\n    var chain = function() {};\n    chain.prototype = parent.prototype;\n    subclass.prototype = new chain();\n    subclass.prototype.constructor = subclass;\n  };\n\n  var TreeNode = function(text, offset, elements) {\n    this.text = text;\n    this.offset = offset;\n    this.elements = elements || [];\n  };\n\n  TreeNode.prototype.forEach = function(block, context) {\n    for (var el = this.elements, i = 0, n = el.length; i < n; i++) {\n      block.call(context, el[i], i, el);\n    }\n  };\n\n  var TreeNode1 = function(text, offset, elements) {\n    TreeNode.apply(this, arguments);\n    this['ident'] = elements[4];\n    this['value'] = elements[6];\n  };\n  inherit(TreeNode1, TreeNode);\n\n  var TreeNode2 = function(text, offset, elements) {\n    TreeNode.apply(this, arguments);\n    this['ident'] = elements[4];\n    this['value'] = elements[6];\n  };\n  inherit(TreeNode2, TreeNode);\n\n  var TreeNode3 = function(text, offset, elements) {\n    TreeNode.apply(this, arguments);\n    this['orig'] = elements[4];\n    this['dest'] = elements[6];\n    this['calc'] = elements[8];\n  };\n  inherit(TreeNode3, TreeNode);\n\n  var FAILURE = {};\n\n  var Grammar = {\n    _read_model: function() {\n      var address0 = FAILURE, index0 = this._offset;\n      this._cache._model = this._cache._model || {};\n      var cached = this._cache._model[index0];\n      if (cached) {\n        this._offset = cached[1];\n        return cached[0];\n      }\n      var index1 = this._offset, elements0 = new Array(5);\n      var address1 = FAILURE;\n      var remaining0 = 1, index2 = this._offset, elements1 = [], address2 = true;\n      while (address2 !== FAILURE) {\n        address2 = this._read_compartment();\n        if (address2 !== FAILURE) {\n          elements1.push(address2);\n          --remaining0;\n        }\n      }\n      if (remaining0 <= 0) {\n        address1 = new TreeNode(this._input.substring(index2, this._offset), index2, elements1);\n        this._offset = this._offset;\n      } else {\n        address1 = FAILURE;\n      }\n      if (address1 !== FAILURE) {\n        elements0[0] = address1;\n        var address3 = FAILURE;\n        var index3 = this._offset;\n        address3 = this._read_whitespace();\n        if (address3 === FAILURE) {\n          address3 = new TreeNode(this._input.substring(index3, index3), index3);\n          this._offset = index3;\n        }\n        if (address3 !== FAILURE) {\n          elements0[1] = address3;\n          var address4 = FAILURE;\n          var remaining1 = 0, index4 = this._offset, elements2 = [], address5 = true;\n          while (address5 !== FAILURE) {\n            address5 = this._read_parameter();\n            if (address5 !== FAILURE) {\n              elements2.push(address5);\n              --remaining1;\n            }\n          }\n          if (remaining1 <= 0) {\n            address4 = new TreeNode(this._input.substring(index4, this._offset), index4, elements2);\n            this._offset = this._offset;\n          } else {\n            address4 = FAILURE;\n          }\n          if (address4 !== FAILURE) {\n            elements0[2] = address4;\n            var address6 = FAILURE;\n            var index5 = this._offset;\n            address6 = this._read_whitespace();\n            if (address6 === FAILURE) {\n              address6 = new TreeNode(this._input.substring(index5, index5), index5);\n              this._offset = index5;\n            }\n            if (address6 !== FAILURE) {\n              elements0[3] = address6;\n              var address7 = FAILURE;\n              var remaining2 = 0, index6 = this._offset, elements3 = [], address8 = true;\n              while (address8 !== FAILURE) {\n                address8 = this._read_reaction();\n                if (address8 !== FAILURE) {\n                  elements3.push(address8);\n                  --remaining2;\n                }\n              }\n              if (remaining2 <= 0) {\n                address7 = new TreeNode(this._input.substring(index6, this._offset), index6, elements3);\n                this._offset = this._offset;\n              } else {\n                address7 = FAILURE;\n              }\n              if (address7 !== FAILURE) {\n                elements0[4] = address7;\n              } else {\n                elements0 = null;\n                this._offset = index1;\n              }\n            } else {\n              elements0 = null;\n              this._offset = index1;\n            }\n          } else {\n            elements0 = null;\n            this._offset = index1;\n          }\n        } else {\n          elements0 = null;\n          this._offset = index1;\n        }\n      } else {\n        elements0 = null;\n        this._offset = index1;\n      }\n      if (elements0 === null) {\n        address0 = FAILURE;\n      } else {\n        address0 = new TreeNode(this._input.substring(index1, this._offset), index1, elements0);\n        this._offset = this._offset;\n      }\n      this._cache._model[index0] = [address0, this._offset];\n      return address0;\n    },\n\n    _read_compartment: function() {\n      var address0 = FAILURE, index0 = this._offset;\n      this._cache._compartment = this._cache._compartment || {};\n      var cached = this._cache._compartment[index0];\n      if (cached) {\n        this._offset = cached[1];\n        return cached[0];\n      }\n      var index1 = this._offset, elements0 = new Array(10);\n      var address1 = FAILURE;\n      var chunk0 = null;\n      if (this._offset < this._inputSize) {\n        chunk0 = this._input.substring(this._offset, this._offset + 1);\n      }\n      if (chunk0 !== null && chunk0.toLowerCase() === '('.toLowerCase()) {\n        address1 = new TreeNode(this._input.substring(this._offset, this._offset + 1), this._offset);\n        this._offset = this._offset + 1;\n      } else {\n        address1 = FAILURE;\n        if (this._offset > this._failure) {\n          this._failure = this._offset;\n          this._expected = [];\n        }\n        if (this._offset === this._failure) {\n          this._expected.push('`(`');\n        }\n      }\n      if (address1 !== FAILURE) {\n        elements0[0] = address1;\n        var address2 = FAILURE;\n        var index2 = this._offset;\n        address2 = this._read_whitespace();\n        if (address2 === FAILURE) {\n          address2 = new TreeNode(this._input.substring(index2, index2), index2);\n          this._offset = index2;\n        }\n        if (address2 !== FAILURE) {\n          elements0[1] = address2;\n          var address3 = FAILURE;\n          var chunk1 = null;\n          if (this._offset < this._inputSize) {\n            chunk1 = this._input.substring(this._offset, this._offset + 4);\n          }\n          if (chunk1 !== null && chunk1.toLowerCase() === 'comp'.toLowerCase()) {\n            address3 = new TreeNode(this._input.substring(this._offset, this._offset + 4), this._offset);\n            this._offset = this._offset + 4;\n          } else {\n            address3 = FAILURE;\n            if (this._offset > this._failure) {\n              this._failure = this._offset;\n              this._expected = [];\n            }\n            if (this._offset === this._failure) {\n              this._expected.push('`comp`');\n            }\n          }\n          if (address3 !== FAILURE) {\n            elements0[2] = address3;\n            var address4 = FAILURE;\n            var index3 = this._offset;\n            address4 = this._read_whitespace();\n            if (address4 === FAILURE) {\n              address4 = new TreeNode(this._input.substring(index3, index3), index3);\n              this._offset = index3;\n            }\n            if (address4 !== FAILURE) {\n              elements0[3] = address4;\n              var address5 = FAILURE;\n              address5 = this._read_ident();\n              if (address5 !== FAILURE) {\n                elements0[4] = address5;\n                var address6 = FAILURE;\n                var index4 = this._offset;\n                address6 = this._read_whitespace();\n                if (address6 === FAILURE) {\n                  address6 = new TreeNode(this._input.substring(index4, index4), index4);\n                  this._offset = index4;\n                }\n                if (address6 !== FAILURE) {\n                  elements0[5] = address6;\n                  var address7 = FAILURE;\n                  address7 = this._read_value();\n                  if (address7 !== FAILURE) {\n                    elements0[6] = address7;\n                    var address8 = FAILURE;\n                    var index5 = this._offset;\n                    address8 = this._read_whitespace();\n                    if (address8 === FAILURE) {\n                      address8 = new TreeNode(this._input.substring(index5, index5), index5);\n                      this._offset = index5;\n                    }\n                    if (address8 !== FAILURE) {\n                      elements0[7] = address8;\n                      var address9 = FAILURE;\n                      var chunk2 = null;\n                      if (this._offset < this._inputSize) {\n                        chunk2 = this._input.substring(this._offset, this._offset + 1);\n                      }\n                      if (chunk2 !== null && chunk2.toLowerCase() === ')'.toLowerCase()) {\n                        address9 = new TreeNode(this._input.substring(this._offset, this._offset + 1), this._offset);\n                        this._offset = this._offset + 1;\n                      } else {\n                        address9 = FAILURE;\n                        if (this._offset > this._failure) {\n                          this._failure = this._offset;\n                          this._expected = [];\n                        }\n                        if (this._offset === this._failure) {\n                          this._expected.push('`)`');\n                        }\n                      }\n                      if (address9 !== FAILURE) {\n                        elements0[8] = address9;\n                        var address10 = FAILURE;\n                        var index6 = this._offset;\n                        address10 = this._read_whitespace();\n                        if (address10 === FAILURE) {\n                          address10 = new TreeNode(this._input.substring(index6, index6), index6);\n                          this._offset = index6;\n                        }\n                        if (address10 !== FAILURE) {\n                          elements0[9] = address10;\n                        } else {\n                          elements0 = null;\n                          this._offset = index1;\n                        }\n                      } else {\n                        elements0 = null;\n                        this._offset = index1;\n                      }\n                    } else {\n                      elements0 = null;\n                      this._offset = index1;\n                    }\n                  } else {\n                    elements0 = null;\n                    this._offset = index1;\n                  }\n                } else {\n                  elements0 = null;\n                  this._offset = index1;\n                }\n              } else {\n                elements0 = null;\n                this._offset = index1;\n              }\n            } else {\n              elements0 = null;\n              this._offset = index1;\n            }\n          } else {\n            elements0 = null;\n            this._offset = index1;\n          }\n        } else {\n          elements0 = null;\n          this._offset = index1;\n        }\n      } else {\n        elements0 = null;\n        this._offset = index1;\n      }\n      if (elements0 === null) {\n        address0 = FAILURE;\n      } else {\n        address0 = new TreeNode1(this._input.substring(index1, this._offset), index1, elements0);\n        this._offset = this._offset;\n      }\n      this._cache._compartment[index0] = [address0, this._offset];\n      return address0;\n    },\n\n    _read_parameter: function() {\n      var address0 = FAILURE, index0 = this._offset;\n      this._cache._parameter = this._cache._parameter || {};\n      var cached = this._cache._parameter[index0];\n      if (cached) {\n        this._offset = cached[1];\n        return cached[0];\n      }\n      var index1 = this._offset, elements0 = new Array(10);\n      var address1 = FAILURE;\n      var chunk0 = null;\n      if (this._offset < this._inputSize) {\n        chunk0 = this._input.substring(this._offset, this._offset + 1);\n      }\n      if (chunk0 !== null && chunk0.toLowerCase() === '('.toLowerCase()) {\n        address1 = new TreeNode(this._input.substring(this._offset, this._offset + 1), this._offset);\n        this._offset = this._offset + 1;\n      } else {\n        address1 = FAILURE;\n        if (this._offset > this._failure) {\n          this._failure = this._offset;\n          this._expected = [];\n        }\n        if (this._offset === this._failure) {\n          this._expected.push('`(`');\n        }\n      }\n      if (address1 !== FAILURE) {\n        elements0[0] = address1;\n        var address2 = FAILURE;\n        var index2 = this._offset;\n        address2 = this._read_whitespace();\n        if (address2 === FAILURE) {\n          address2 = new TreeNode(this._input.substring(index2, index2), index2);\n          this._offset = index2;\n        }\n        if (address2 !== FAILURE) {\n          elements0[1] = address2;\n          var address3 = FAILURE;\n          var chunk1 = null;\n          if (this._offset < this._inputSize) {\n            chunk1 = this._input.substring(this._offset, this._offset + 5);\n          }\n          if (chunk1 !== null && chunk1.toLowerCase() === 'param'.toLowerCase()) {\n            address3 = new TreeNode(this._input.substring(this._offset, this._offset + 5), this._offset);\n            this._offset = this._offset + 5;\n          } else {\n            address3 = FAILURE;\n            if (this._offset > this._failure) {\n              this._failure = this._offset;\n              this._expected = [];\n            }\n            if (this._offset === this._failure) {\n              this._expected.push('`param`');\n            }\n          }\n          if (address3 !== FAILURE) {\n            elements0[2] = address3;\n            var address4 = FAILURE;\n            var index3 = this._offset;\n            address4 = this._read_whitespace();\n            if (address4 === FAILURE) {\n              address4 = new TreeNode(this._input.substring(index3, index3), index3);\n              this._offset = index3;\n            }\n            if (address4 !== FAILURE) {\n              elements0[3] = address4;\n              var address5 = FAILURE;\n              address5 = this._read_ident();\n              if (address5 !== FAILURE) {\n                elements0[4] = address5;\n                var address6 = FAILURE;\n                var index4 = this._offset;\n                address6 = this._read_whitespace();\n                if (address6 === FAILURE) {\n                  address6 = new TreeNode(this._input.substring(index4, index4), index4);\n                  this._offset = index4;\n                }\n                if (address6 !== FAILURE) {\n                  elements0[5] = address6;\n                  var address7 = FAILURE;\n                  address7 = this._read_value();\n                  if (address7 !== FAILURE) {\n                    elements0[6] = address7;\n                    var address8 = FAILURE;\n                    var index5 = this._offset;\n                    address8 = this._read_whitespace();\n                    if (address8 === FAILURE) {\n                      address8 = new TreeNode(this._input.substring(index5, index5), index5);\n                      this._offset = index5;\n                    }\n                    if (address8 !== FAILURE) {\n                      elements0[7] = address8;\n                      var address9 = FAILURE;\n                      var chunk2 = null;\n                      if (this._offset < this._inputSize) {\n                        chunk2 = this._input.substring(this._offset, this._offset + 1);\n                      }\n                      if (chunk2 !== null && chunk2.toLowerCase() === ')'.toLowerCase()) {\n                        address9 = new TreeNode(this._input.substring(this._offset, this._offset + 1), this._offset);\n                        this._offset = this._offset + 1;\n                      } else {\n                        address9 = FAILURE;\n                        if (this._offset > this._failure) {\n                          this._failure = this._offset;\n                          this._expected = [];\n                        }\n                        if (this._offset === this._failure) {\n                          this._expected.push('`)`');\n                        }\n                      }\n                      if (address9 !== FAILURE) {\n                        elements0[8] = address9;\n                        var address10 = FAILURE;\n                        var index6 = this._offset;\n                        address10 = this._read_whitespace();\n                        if (address10 === FAILURE) {\n                          address10 = new TreeNode(this._input.substring(index6, index6), index6);\n                          this._offset = index6;\n                        }\n                        if (address10 !== FAILURE) {\n                          elements0[9] = address10;\n                        } else {\n                          elements0 = null;\n                          this._offset = index1;\n                        }\n                      } else {\n                        elements0 = null;\n                        this._offset = index1;\n                      }\n                    } else {\n                      elements0 = null;\n                      this._offset = index1;\n                    }\n                  } else {\n                    elements0 = null;\n                    this._offset = index1;\n                  }\n                } else {\n                  elements0 = null;\n                  this._offset = index1;\n                }\n              } else {\n                elements0 = null;\n                this._offset = index1;\n              }\n            } else {\n              elements0 = null;\n              this._offset = index1;\n            }\n          } else {\n            elements0 = null;\n            this._offset = index1;\n          }\n        } else {\n          elements0 = null;\n          this._offset = index1;\n        }\n      } else {\n        elements0 = null;\n        this._offset = index1;\n      }\n      if (elements0 === null) {\n        address0 = FAILURE;\n      } else {\n        address0 = new TreeNode2(this._input.substring(index1, this._offset), index1, elements0);\n        this._offset = this._offset;\n      }\n      this._cache._parameter[index0] = [address0, this._offset];\n      return address0;\n    },\n\n    _read_reaction: function() {\n      var address0 = FAILURE, index0 = this._offset;\n      this._cache._reaction = this._cache._reaction || {};\n      var cached = this._cache._reaction[index0];\n      if (cached) {\n        this._offset = cached[1];\n        return cached[0];\n      }\n      var index1 = this._offset, elements0 = new Array(12);\n      var address1 = FAILURE;\n      var chunk0 = null;\n      if (this._offset < this._inputSize) {\n        chunk0 = this._input.substring(this._offset, this._offset + 1);\n      }\n      if (chunk0 !== null && chunk0.toLowerCase() === '('.toLowerCase()) {\n        address1 = new TreeNode(this._input.substring(this._offset, this._offset + 1), this._offset);\n        this._offset = this._offset + 1;\n      } else {\n        address1 = FAILURE;\n        if (this._offset > this._failure) {\n          this._failure = this._offset;\n          this._expected = [];\n        }\n        if (this._offset === this._failure) {\n          this._expected.push('`(`');\n        }\n      }\n      if (address1 !== FAILURE) {\n        elements0[0] = address1;\n        var address2 = FAILURE;\n        var index2 = this._offset;\n        address2 = this._read_whitespace();\n        if (address2 === FAILURE) {\n          address2 = new TreeNode(this._input.substring(index2, index2), index2);\n          this._offset = index2;\n        }\n        if (address2 !== FAILURE) {\n          elements0[1] = address2;\n          var address3 = FAILURE;\n          var chunk1 = null;\n          if (this._offset < this._inputSize) {\n            chunk1 = this._input.substring(this._offset, this._offset + 5);\n          }\n          if (chunk1 !== null && chunk1.toLowerCase() === 'react'.toLowerCase()) {\n            address3 = new TreeNode(this._input.substring(this._offset, this._offset + 5), this._offset);\n            this._offset = this._offset + 5;\n          } else {\n            address3 = FAILURE;\n            if (this._offset > this._failure) {\n              this._failure = this._offset;\n              this._expected = [];\n            }\n            if (this._offset === this._failure) {\n              this._expected.push('`react`');\n            }\n          }\n          if (address3 !== FAILURE) {\n            elements0[2] = address3;\n            var address4 = FAILURE;\n            var index3 = this._offset;\n            address4 = this._read_whitespace();\n            if (address4 === FAILURE) {\n              address4 = new TreeNode(this._input.substring(index3, index3), index3);\n              this._offset = index3;\n            }\n            if (address4 !== FAILURE) {\n              elements0[3] = address4;\n              var address5 = FAILURE;\n              address5 = this._read_orig();\n              if (address5 !== FAILURE) {\n                elements0[4] = address5;\n                var address6 = FAILURE;\n                var index4 = this._offset;\n                address6 = this._read_whitespace();\n                if (address6 === FAILURE) {\n                  address6 = new TreeNode(this._input.substring(index4, index4), index4);\n                  this._offset = index4;\n                }\n                if (address6 !== FAILURE) {\n                  elements0[5] = address6;\n                  var address7 = FAILURE;\n                  address7 = this._read_dest();\n                  if (address7 !== FAILURE) {\n                    elements0[6] = address7;\n                    var address8 = FAILURE;\n                    var index5 = this._offset;\n                    address8 = this._read_whitespace();\n                    if (address8 === FAILURE) {\n                      address8 = new TreeNode(this._input.substring(index5, index5), index5);\n                      this._offset = index5;\n                    }\n                    if (address8 !== FAILURE) {\n                      elements0[7] = address8;\n                      var address9 = FAILURE;\n                      address9 = this._read_calc();\n                      if (address9 !== FAILURE) {\n                        elements0[8] = address9;\n                        var address10 = FAILURE;\n                        var index6 = this._offset;\n                        address10 = this._read_whitespace();\n                        if (address10 === FAILURE) {\n                          address10 = new TreeNode(this._input.substring(index6, index6), index6);\n                          this._offset = index6;\n                        }\n                        if (address10 !== FAILURE) {\n                          elements0[9] = address10;\n                          var address11 = FAILURE;\n                          var chunk2 = null;\n                          if (this._offset < this._inputSize) {\n                            chunk2 = this._input.substring(this._offset, this._offset + 1);\n                          }\n                          if (chunk2 !== null && chunk2.toLowerCase() === ')'.toLowerCase()) {\n                            address11 = new TreeNode(this._input.substring(this._offset, this._offset + 1), this._offset);\n                            this._offset = this._offset + 1;\n                          } else {\n                            address11 = FAILURE;\n                            if (this._offset > this._failure) {\n                              this._failure = this._offset;\n                              this._expected = [];\n                            }\n                            if (this._offset === this._failure) {\n                              this._expected.push('`)`');\n                            }\n                          }\n                          if (address11 !== FAILURE) {\n                            elements0[10] = address11;\n                            var address12 = FAILURE;\n                            var index7 = this._offset;\n                            address12 = this._read_whitespace();\n                            if (address12 === FAILURE) {\n                              address12 = new TreeNode(this._input.substring(index7, index7), index7);\n                              this._offset = index7;\n                            }\n                            if (address12 !== FAILURE) {\n                              elements0[11] = address12;\n                            } else {\n                              elements0 = null;\n                              this._offset = index1;\n                            }\n                          } else {\n                            elements0 = null;\n                            this._offset = index1;\n                          }\n                        } else {\n                          elements0 = null;\n                          this._offset = index1;\n                        }\n                      } else {\n                        elements0 = null;\n                        this._offset = index1;\n                      }\n                    } else {\n                      elements0 = null;\n                      this._offset = index1;\n                    }\n                  } else {\n                    elements0 = null;\n                    this._offset = index1;\n                  }\n                } else {\n                  elements0 = null;\n                  this._offset = index1;\n                }\n              } else {\n                elements0 = null;\n                this._offset = index1;\n              }\n            } else {\n              elements0 = null;\n              this._offset = index1;\n            }\n          } else {\n            elements0 = null;\n            this._offset = index1;\n          }\n        } else {\n          elements0 = null;\n          this._offset = index1;\n        }\n      } else {\n        elements0 = null;\n        this._offset = index1;\n      }\n      if (elements0 === null) {\n        address0 = FAILURE;\n      } else {\n        address0 = new TreeNode3(this._input.substring(index1, this._offset), index1, elements0);\n        this._offset = this._offset;\n      }\n      this._cache._reaction[index0] = [address0, this._offset];\n      return address0;\n    },\n\n    _read_orig: function() {\n      var address0 = FAILURE, index0 = this._offset;\n      this._cache._orig = this._cache._orig || {};\n      var cached = this._cache._orig[index0];\n      if (cached) {\n        this._offset = cached[1];\n        return cached[0];\n      }\n      address0 = this._read_ident();\n      this._cache._orig[index0] = [address0, this._offset];\n      return address0;\n    },\n\n    _read_dest: function() {\n      var address0 = FAILURE, index0 = this._offset;\n      this._cache._dest = this._cache._dest || {};\n      var cached = this._cache._dest[index0];\n      if (cached) {\n        this._offset = cached[1];\n        return cached[0];\n      }\n      address0 = this._read_ident();\n      this._cache._dest[index0] = [address0, this._offset];\n      return address0;\n    },\n\n    _read_ident: function() {\n      var address0 = FAILURE, index0 = this._offset;\n      this._cache._ident = this._cache._ident || {};\n      var cached = this._cache._ident[index0];\n      if (cached) {\n        this._offset = cached[1];\n        return cached[0];\n      }\n      var remaining0 = 1, index1 = this._offset, elements0 = [], address1 = true;\n      while (address1 !== FAILURE) {\n        var chunk0 = null;\n        if (this._offset < this._inputSize) {\n          chunk0 = this._input.substring(this._offset, this._offset + 1);\n        }\n        if (chunk0 !== null && /^[A-Za-z0-9]/.test(chunk0)) {\n          address1 = new TreeNode(this._input.substring(this._offset, this._offset + 1), this._offset);\n          this._offset = this._offset + 1;\n        } else {\n          address1 = FAILURE;\n          if (this._offset > this._failure) {\n            this._failure = this._offset;\n            this._expected = [];\n          }\n          if (this._offset === this._failure) {\n            this._expected.push('[A-Za-z0-9]');\n          }\n        }\n        if (address1 !== FAILURE) {\n          elements0.push(address1);\n          --remaining0;\n        }\n      }\n      if (remaining0 <= 0) {\n        address0 = new TreeNode(this._input.substring(index1, this._offset), index1, elements0);\n        this._offset = this._offset;\n      } else {\n        address0 = FAILURE;\n      }\n      this._cache._ident[index0] = [address0, this._offset];\n      return address0;\n    },\n\n    _read_value: function() {\n      var address0 = FAILURE, index0 = this._offset;\n      this._cache._value = this._cache._value || {};\n      var cached = this._cache._value[index0];\n      if (cached) {\n        this._offset = cached[1];\n        return cached[0];\n      }\n      var remaining0 = 1, index1 = this._offset, elements0 = [], address1 = true;\n      while (address1 !== FAILURE) {\n        var chunk0 = null;\n        if (this._offset < this._inputSize) {\n          chunk0 = this._input.substring(this._offset, this._offset + 1);\n        }\n        if (chunk0 !== null && /^[0-9\\.]/.test(chunk0)) {\n          address1 = new TreeNode(this._input.substring(this._offset, this._offset + 1), this._offset);\n          this._offset = this._offset + 1;\n        } else {\n          address1 = FAILURE;\n          if (this._offset > this._failure) {\n            this._failure = this._offset;\n            this._expected = [];\n          }\n          if (this._offset === this._failure) {\n            this._expected.push('[0-9\\\\.]');\n          }\n        }\n        if (address1 !== FAILURE) {\n          elements0.push(address1);\n          --remaining0;\n        }\n      }\n      if (remaining0 <= 0) {\n        address0 = new TreeNode(this._input.substring(index1, this._offset), index1, elements0);\n        this._offset = this._offset;\n      } else {\n        address0 = FAILURE;\n      }\n      this._cache._value[index0] = [address0, this._offset];\n      return address0;\n    },\n\n    _read_whitespace: function() {\n      var address0 = FAILURE, index0 = this._offset;\n      this._cache._whitespace = this._cache._whitespace || {};\n      var cached = this._cache._whitespace[index0];\n      if (cached) {\n        this._offset = cached[1];\n        return cached[0];\n      }\n      var chunk0 = null;\n      if (this._offset < this._inputSize) {\n        chunk0 = this._input.substring(this._offset, this._offset + 1);\n      }\n      if (chunk0 !== null && /^[\\s*]/.test(chunk0)) {\n        address0 = new TreeNode(this._input.substring(this._offset, this._offset + 1), this._offset);\n        this._offset = this._offset + 1;\n      } else {\n        address0 = FAILURE;\n        if (this._offset > this._failure) {\n          this._failure = this._offset;\n          this._expected = [];\n        }\n        if (this._offset === this._failure) {\n          this._expected.push('[\\\\s*]');\n        }\n      }\n      this._cache._whitespace[index0] = [address0, this._offset];\n      return address0;\n    },\n\n    _read_calc: function() {\n      var address0 = FAILURE, index0 = this._offset;\n      this._cache._calc = this._cache._calc || {};\n      var cached = this._cache._calc[index0];\n      if (cached) {\n        this._offset = cached[1];\n        return cached[0];\n      }\n      var index1 = this._offset, elements0 = new Array(3);\n      var address1 = FAILURE;\n      var chunk0 = null;\n      if (this._offset < this._inputSize) {\n        chunk0 = this._input.substring(this._offset, this._offset + 1);\n      }\n      if (chunk0 !== null && chunk0.toLowerCase() === '{'.toLowerCase()) {\n        address1 = new TreeNode(this._input.substring(this._offset, this._offset + 1), this._offset);\n        this._offset = this._offset + 1;\n      } else {\n        address1 = FAILURE;\n        if (this._offset > this._failure) {\n          this._failure = this._offset;\n          this._expected = [];\n        }\n        if (this._offset === this._failure) {\n          this._expected.push('`{`');\n        }\n      }\n      if (address1 !== FAILURE) {\n        elements0[0] = address1;\n        var address2 = FAILURE;\n        var remaining0 = 0, index2 = this._offset, elements1 = [], address3 = true;\n        while (address3 !== FAILURE) {\n          var chunk1 = null;\n          if (this._offset < this._inputSize) {\n            chunk1 = this._input.substring(this._offset, this._offset + 1);\n          }\n          if (chunk1 !== null && /^[^}]/.test(chunk1)) {\n            address3 = new TreeNode(this._input.substring(this._offset, this._offset + 1), this._offset);\n            this._offset = this._offset + 1;\n          } else {\n            address3 = FAILURE;\n            if (this._offset > this._failure) {\n              this._failure = this._offset;\n              this._expected = [];\n            }\n            if (this._offset === this._failure) {\n              this._expected.push('[^}]');\n            }\n          }\n          if (address3 !== FAILURE) {\n            elements1.push(address3);\n            --remaining0;\n          }\n        }\n        if (remaining0 <= 0) {\n          address2 = new TreeNode(this._input.substring(index2, this._offset), index2, elements1);\n          this._offset = this._offset;\n        } else {\n          address2 = FAILURE;\n        }\n        if (address2 !== FAILURE) {\n          elements0[1] = address2;\n          var address4 = FAILURE;\n          var chunk2 = null;\n          if (this._offset < this._inputSize) {\n            chunk2 = this._input.substring(this._offset, this._offset + 1);\n          }\n          if (chunk2 !== null && chunk2.toLowerCase() === '}'.toLowerCase()) {\n            address4 = new TreeNode(this._input.substring(this._offset, this._offset + 1), this._offset);\n            this._offset = this._offset + 1;\n          } else {\n            address4 = FAILURE;\n            if (this._offset > this._failure) {\n              this._failure = this._offset;\n              this._expected = [];\n            }\n            if (this._offset === this._failure) {\n              this._expected.push('`}`');\n            }\n          }\n          if (address4 !== FAILURE) {\n            elements0[2] = address4;\n          } else {\n            elements0 = null;\n            this._offset = index1;\n          }\n        } else {\n          elements0 = null;\n          this._offset = index1;\n        }\n      } else {\n        elements0 = null;\n        this._offset = index1;\n      }\n      if (elements0 === null) {\n        address0 = FAILURE;\n      } else {\n        address0 = new TreeNode(this._input.substring(index1, this._offset), index1, elements0);\n        this._offset = this._offset;\n      }\n      this._cache._calc[index0] = [address0, this._offset];\n      return address0;\n    }\n  };\n\n  var Parser = function(input, actions, types) {\n    this._input = input;\n    this._inputSize = input.length;\n    this._actions = actions;\n    this._types = types;\n    this._offset = 0;\n    this._cache = {};\n    this._failure = 0;\n    this._expected = [];\n  };\n\n  Parser.prototype.parse = function() {\n    var tree = this._read_model();\n    if (tree !== FAILURE && this._offset === this._inputSize) {\n      return tree;\n    }\n    if (this._expected.length === 0) {\n      this._failure = this._offset;\n      this._expected.push('<EOF>');\n    }\n    this.constructor.lastError = {offset: this._offset, expected: this._expected};\n    throw new SyntaxError(formatError(this._input, this._failure, this._expected));\n  };\n\n  var parse = function(input, options) {\n    options = options || {};\n    var parser = new Parser(input, options.actions, options.types);\n    return parser.parse();\n  };\n  extend(Parser.prototype, Grammar);\n\n  var exported = {Grammar: Grammar, Parser: Parser, parse: parse};\n\n  if (typeof require === 'function' && typeof exports === 'object') {\n    extend(exports, exported);\n  } else {\n    var namespace = typeof this !== 'undefined' ? this : window;\n    namespace.MODEL = exported;\n  }\n})();\n","import React from \"react\";\r\nimport \"./Chart.css\";\r\n\r\ninterface IProps {}\r\n\r\ninterface IState {}\r\n\r\nexport default class Chart extends React.Component<IProps, IState> {\r\n    constructor(props: IProps) {\r\n        super(props);\r\n    }\r\n\r\n    componentDidMount() {}\r\n\r\n    render() {\r\n        return <div className=\"chart\">Chart</div>;\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport \"./Graph.css\";\r\n\r\nimport ForceGraph2D from \"react-force-graph-2d\";\r\n\r\ninterface IProps {}\r\n\r\ninterface IState {}\r\n\r\nexport default class Graph extends React.Component<IProps, IState> {\r\n    constructor(props: IProps) {\r\n        super(props);\r\n    }\r\n\r\n    componentDidMount() {}\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"graph\">\r\n                Graph\r\n                <ForceGraph2D\r\n                    graphData={{\r\n                        nodes: [{ id: 0 }, { id: 1 }, { id: 2 }, { id: 3 }, { id: 4 }],\r\n                        links: [\r\n                            { source: 0, target: 1 },\r\n                            { source: 3, target: 4 },\r\n                            { source: 2, target: 4 },\r\n                            { source: 3, target: 1 },\r\n                        ],\r\n                    }}\r\n                    nodeLabel=\"id\"\r\n                    width={500}\r\n                    height={500}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport \"./Parser.css\";\r\nvar model = require(\"./model\");\r\nvar actions = {\r\n    makeCompartment: function (input: any, start: any, end: any, elements: any) {\r\n        console.log(elements);\r\n        console.log(\"ident: \" + elements[4].text);\r\n        console.log(\"value \" + elements[6].text);\r\n    },\r\n    makeParameter: function (input: any, start: any, end: any, elements: any) {\r\n        console.log(elements);\r\n        console.log(\"ident: \" + elements[4].text);\r\n        console.log(\"value \" + elements[6].text);\r\n    },\r\n    makeReaction: function (input: any, start: any, end: any, elements: any) {\r\n        console.log(elements);\r\n        console.log(\"orig: \" + elements[4].text);\r\n        console.log(\"dest: \" + elements[6].text);\r\n        console.log(\"value \" + elements[8].text);\r\n    },\r\n};\r\n\r\ninterface CModel {\r\n    compartments: Compartment[];\r\n    parameters: Parameter[];\r\n    reactions: Reaction[];\r\n}\r\n\r\ninterface Compartment {\r\n    name: string;\r\n    value: number;\r\n}\r\n\r\ninterface Parameter {\r\n    name: string;\r\n    value: number;\r\n}\r\n\r\ninterface Reaction {\r\n    orig: string;\r\n    dest: string;\r\n    value: string;\r\n}\r\n\r\ninterface IProps {}\r\n\r\ninterface IState {\r\n    model: CModel;\r\n    value: string;\r\n}\r\n\r\nexport default class Parser extends React.Component<IProps, IState> {\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        this.state = {\r\n            model: { compartments: [], parameters: [], reactions: [] },\r\n            value: \"(comp A 10)(comp B 10)(param k 0.1)(react A B {A * k})\",\r\n        };\r\n    }\r\n\r\n    //Parse Model\r\n    cModel: CModel = { compartments: [], parameters: [], reactions: [] };\r\n    makeCompartment(elements: any) {\r\n        var comp = { name: elements.elements[4].text, value: +elements.elements[6].text };\r\n        this.cModel.compartments.push(comp);\r\n    }\r\n    makeParameter(elements: any) {\r\n        var param = { name: elements.elements[4].text, value: +elements.elements[6].text };\r\n        this.cModel.parameters.push(param);\r\n    }\r\n    makeReaction(elements: any) {\r\n        var react = {\r\n            orig: elements.elements[4].text,\r\n            dest: elements.elements[6].text,\r\n            value: elements.elements[8].text,\r\n        };\r\n        this.cModel.reactions.push(react);\r\n    }\r\n\r\n    onClick(event: any) {\r\n        //parse Input\r\n        this.cModel = { compartments: [], parameters: [], reactions: [] };\r\n        var tree = model.parse(this.state.value);\r\n        tree.elements[0].elements.forEach(this.makeCompartment.bind(this));\r\n        tree.elements[2].elements.forEach(this.makeParameter.bind(this));\r\n        tree.elements[4].elements.forEach(this.makeReaction.bind(this));\r\n\r\n        //console.log(this.cModel);\r\n        this.setState({ model: this.cModel });\r\n        //console.log(this.state.model);\r\n\r\n        event.preventDefault();\r\n    }\r\n\r\n    handleChange(event: any) {\r\n        this.setState({ value: event.target.value });\r\n    }\r\n\r\n    componentDidMount() {}\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"parser\">\r\n                Parser\r\n                <form onSubmit={this.onClick.bind(this)}>\r\n                    <label>\r\n                        Model:\r\n                        <br />\r\n                        <textarea\r\n                            className=\"parserText\"\r\n                            value={this.state.value}\r\n                            onChange={this.handleChange.bind(this)}\r\n                        />\r\n                    </label>\r\n                    <br />\r\n                    <input type=\"submit\" value=\"Submit\" />\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport \"./Settings.css\";\r\n\r\ninterface IProps {}\r\n\r\ninterface IState {}\r\n\r\nexport default class Settings extends React.Component<IProps, IState> {\r\n    constructor(props: IProps) {\r\n        super(props);\r\n    }\r\n\r\n    componentDidMount() {}\r\n\r\n    render() {\r\n        return <div className=\"settings\">Settings</div>;\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport Chart from \"./Chart\";\r\nimport Graph from \"./Graph\";\r\nimport Parser from \"./Parser\";\r\nimport Settings from \"./Settings\";\r\n\r\ninterface IProps {}\r\n\r\ninterface IState {}\r\n\r\nexport default class Main extends React.Component<IProps, IState> {\r\n    constructor(props: IProps) {\r\n        super(props);\r\n    }\r\n\r\n    componentDidMount() {}\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                Test\r\n                <Parser />\r\n                <Settings />\r\n                <Chart />\r\n                <Graph />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Main from \"./Main\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Main />\n    </React.StrictMode>,\n    document.getElementById(\"root\"),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}